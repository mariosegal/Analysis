proc sql;
select min((ceil(max(percent1)*10)/10)+ 0.2,1.2) into :max1 from matrix_out1;
quit;
proc catalog c=work.gseg kill;
run;
quit;
ods html style=MTB;
goptions reset=all cback=white noborder htitle=14pt htext=14pt;
goptions device=gif nodisplay xpixels=250 ypixels=250;
title1 "DDA";
axis1 label=(angle=90 f="Arial / bo" justify=center color=black height=14pt "DDA") minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="DDA" and x="DDA")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 "MMS";
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="DDA" and x="MMS")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 "SAV";
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="DDA" and x="SAV")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 "TDA";
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="DDA" and x="TDA")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 "SEC";
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="DDA" and x="SEC")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 "DEFFERED";
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="DDA" and x="DEFFERED")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 "MTG";
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="DDA" and x="MTG")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 "CARD";
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="DDA" and x="CARD")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 "ILN (ALL)";
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="DDA" and x="ILN (ALL)")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 "Lines";
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="DDA" and x="Lines")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=(angle=90 f="Arial / bo" justify=center color=black height=14pt "MMS") minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="MMS" and x="DDA")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="MMS" and x="MMS")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="MMS" and x="SAV")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="MMS" and x="TDA")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="MMS" and x="SEC")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="MMS" and x="DEFFERED")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="MMS" and x="MTG")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="MMS" and x="CARD")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="MMS" and x="ILN (ALL)")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="MMS" and x="Lines")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=(angle=90 f="Arial / bo" justify=center color=black height=14pt "SAV") minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="SAV" and x="DDA")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="SAV" and x="MMS")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="SAV" and x="SAV")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="SAV" and x="TDA")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="SAV" and x="SEC")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="SAV" and x="DEFFERED")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="SAV" and x="MTG")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="SAV" and x="CARD")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="SAV" and x="ILN (ALL)")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="SAV" and x="Lines")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=(angle=90 f="Arial / bo" justify=center color=black height=14pt "TDA") minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="TDA" and x="DDA")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="TDA" and x="MMS")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="TDA" and x="SAV")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="TDA" and x="TDA")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="TDA" and x="SEC")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="TDA" and x="DEFFERED")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="TDA" and x="MTG")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="TDA" and x="CARD")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="TDA" and x="ILN (ALL)")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="TDA" and x="Lines")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=(angle=90 f="Arial / bo" justify=center color=black height=14pt "IRA") minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="IRA" and x="DDA")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="IRA" and x="MMS")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="IRA" and x="SAV")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="IRA" and x="TDA")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="IRA" and x="SEC")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="IRA" and x="DEFFERED")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="IRA" and x="MTG")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="IRA" and x="CARD")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="IRA" and x="ILN (ALL)")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="IRA" and x="Lines")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=(angle=90 f="Arial / bo" justify=center color=black height=14pt "SEC") minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="SEC" and x="DDA")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="SEC" and x="MMS")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="SEC" and x="SAV")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="SEC" and x="TDA")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="SEC" and x="SEC")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="SEC" and x="DEFFERED")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="SEC" and x="MTG")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="SEC" and x="CARD")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="SEC" and x="ILN (ALL)")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="SEC" and x="Lines")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=(angle=90 f="Arial / bo" justify=center color=black height=14pt "INS") minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="INS" and x="DDA")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="INS" and x="MMS")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="INS" and x="SAV")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="INS" and x="TDA")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="INS" and x="SEC")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="INS" and x="DEFFERED")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="INS" and x="MTG")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="INS" and x="CARD")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="INS" and x="ILN (ALL)")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="INS" and x="Lines")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=(angle=90 f="Arial / bo" justify=center color=black height=14pt "MTG") minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="MTG" and x="DDA")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="MTG" and x="MMS")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="MTG" and x="SAV")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="MTG" and x="TDA")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="MTG" and x="SEC")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="MTG" and x="DEFFERED")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="MTG" and x="MTG")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="MTG" and x="CARD")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="MTG" and x="ILN (ALL)")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="MTG" and x="Lines")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=(angle=90 f="Arial / bo" justify=center color=black height=14pt "HEQ") minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="HEQ" and x="DDA")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="HEQ" and x="MMS")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="HEQ" and x="SAV")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="HEQ" and x="TDA")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="HEQ" and x="SEC")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="HEQ" and x="DEFFERED")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="HEQ" and x="MTG")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="HEQ" and x="CARD")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="HEQ" and x="ILN (ALL)")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="HEQ" and x="Lines")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=(angle=90 f="Arial / bo" justify=center color=black height=14pt "CARD") minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="CARD" and x="DDA")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="CARD" and x="MMS")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="CARD" and x="SAV")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="CARD" and x="TDA")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="CARD" and x="SEC")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="CARD" and x="DEFFERED")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="CARD" and x="MTG")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="CARD" and x="CARD")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="CARD" and x="ILN (ALL)")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="CARD" and x="Lines")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=(angle=90 f="Arial / bo" justify=center color=black height=14pt "ILN") minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="ILN" and x="DDA")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="ILN" and x="MMS")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="ILN" and x="SAV")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="ILN" and x="TDA")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="ILN" and x="SEC")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="ILN" and x="DEFFERED")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="ILN" and x="MTG")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="ILN" and x="CARD")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="ILN" and x="ILN (ALL)")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="ILN" and x="Lines")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=(angle=90 f="Arial / bo" justify=center color=black height=14pt "IND") minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="IND" and x="DDA")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="IND" and x="MMS")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="IND" and x="SAV")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="IND" and x="TDA")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="IND" and x="SEC")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="IND" and x="DEFFERED")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="IND" and x="MTG")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="IND" and x="CARD")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="IND" and x="ILN (ALL)")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
title1 ;
axis1 label=none minor=none major=none color=white value=none order=(0 to 0.6 by 0.1);
axis2 label=none minor=none major=none value=none ;
proc gchart data=matrix_out1(where=(y="IND" and x="Lines")) gout=work.gseg;
vbar fworks_flag1 / sumvar=percent1 subgroup=fworks_flag1 discrete raxis=axis1 width=25 maxis=axis2 gaxis=axis2 outside=sum nolegend noframe;
format percent1 percent8.1;
run;
quit;
goptions reset=all device=gif gsfname=grafout gsfmode=replace xpixels=2000 ypixels=2000;
filename grafout 'C:\Documents and Settings\ewnym5s\My Documents\Finance Works\sample.gif';
proc greplay igout=work.gseg tc=tempcat nofs;
tdef newtemp des="y=12 by x=10 panel template" 1/llx=0 lly=88 lrx=10 lry=88 ulx=0 uly=96 urx=10 ury=96 color=blue 2/llx=10 lly=88 lrx=20 lry=88 ulx=10 uly=96 urx=20 ury=96 color=blue 3/llx=20 lly=88 lrx=30 lry=88 ulx=20 uly=96 urx=30 ury=96 color=blue
4/llx=30 lly=88 lrx=40 lry=88 ulx=30 uly=96 urx=40 ury=96 color=blue 5/llx=40 lly=88 lrx=50 lry=88 ulx=40 uly=96 urx=50 ury=96 color=blue 6/llx=50 lly=88 lrx=60 lry=88 ulx=50 uly=96 urx=60 ury=96 color=blue 7/llx=60 lly=88 lrx=70 lry=88 ulx=60 uly=96
urx=70 ury=96 color=blue 8/llx=70 lly=88 lrx=80 lry=88 ulx=70 uly=96 urx=80 ury=96 color=blue 9/llx=80 lly=88 lrx=90 lry=88 ulx=80 uly=96 urx=90 ury=96 color=blue 10/llx=90 lly=88 lrx=100 lry=88 ulx=90 uly=96 urx=100 ury=96 color=blue 11/llx=0 lly=80
lrx=10 lry=80 ulx=0 uly=88 urx=10 ury=88 color=blue 12/llx=10 lly=80 lrx=20 lry=80 ulx=10 uly=88 urx=20 ury=88 color=blue 13/llx=20 lly=80 lrx=30 lry=80 ulx=20 uly=88 urx=30 ury=88 color=blue 14/llx=30 lly=80 lrx=40 lry=80 ulx=30 uly=88 urx=40 ury=88
color=blue 15/llx=40 lly=80 lrx=50 lry=80 ulx=40 uly=88 urx=50 ury=88 color=blue 16/llx=50 lly=80 lrx=60 lry=80 ulx=50 uly=88 urx=60 ury=88 color=blue 17/llx=60 lly=80 lrx=70 lry=80 ulx=60 uly=88 urx=70 ury=88 color=blue 18/llx=70 lly=80 lrx=80 lry=80
ulx=70 uly=88 urx=80 ury=88 color=blue 19/llx=80 lly=80 lrx=90 lry=80 ulx=80 uly=88 urx=90 ury=88 color=blue 20/llx=90 lly=80 lrx=100 lry=80 ulx=90 uly=88 urx=100 ury=88 color=blue 21/llx=0 lly=72 lrx=10 lry=72 ulx=0 uly=80 urx=10 ury=80 color=blue
22/llx=10 lly=72 lrx=20 lry=72 ulx=10 uly=80 urx=20 ury=80 color=blue 23/llx=20 lly=72 lrx=30 lry=72 ulx=20 uly=80 urx=30 ury=80 color=blue 24/llx=30 lly=72 lrx=40 lry=72 ulx=30 uly=80 urx=40 ury=80 color=blue 25/llx=40 lly=72 lrx=50 lry=72 ulx=40 uly=80
urx=50 ury=80 color=blue 26/llx=50 lly=72 lrx=60 lry=72 ulx=50 uly=80 urx=60 ury=80 color=blue 27/llx=60 lly=72 lrx=70 lry=72 ulx=60 uly=80 urx=70 ury=80 color=blue 28/llx=70 lly=72 lrx=80 lry=72 ulx=70 uly=80 urx=80 ury=80 color=blue 29/llx=80 lly=72
lrx=90 lry=72 ulx=80 uly=80 urx=90 ury=80 color=blue 30/llx=90 lly=72 lrx=100 lry=72 ulx=90 uly=80 urx=100 ury=80 color=blue 31/llx=0 lly=64 lrx=10 lry=64 ulx=0 uly=72 urx=10 ury=72 color=blue 32/llx=10 lly=64 lrx=20 lry=64 ulx=10 uly=72 urx=20 ury=72
color=blue 33/llx=20 lly=64 lrx=30 lry=64 ulx=20 uly=72 urx=30 ury=72 color=blue 34/llx=30 lly=64 lrx=40 lry=64 ulx=30 uly=72 urx=40 ury=72 color=blue 35/llx=40 lly=64 lrx=50 lry=64 ulx=40 uly=72 urx=50 ury=72 color=blue 36/llx=50 lly=64 lrx=60 lry=64
ulx=50 uly=72 urx=60 ury=72 color=blue 37/llx=60 lly=64 lrx=70 lry=64 ulx=60 uly=72 urx=70 ury=72 color=blue 38/llx=70 lly=64 lrx=80 lry=64 ulx=70 uly=72 urx=80 ury=72 color=blue 39/llx=80 lly=64 lrx=90 lry=64 ulx=80 uly=72 urx=90 ury=72 color=blue
40/llx=90 lly=64 lrx=100 lry=64 ulx=90 uly=72 urx=100 ury=72 color=blue 41/llx=0 lly=56 lrx=10 lry=56 ulx=0 uly=64 urx=10 ury=64 color=blue 42/llx=10 lly=56 lrx=20 lry=56 ulx=10 uly=64 urx=20 ury=64 color=blue 43/llx=20 lly=56 lrx=30 lry=56 ulx=20 uly=64
urx=30 ury=64 color=blue 44/llx=30 lly=56 lrx=40 lry=56 ulx=30 uly=64 urx=40 ury=64 color=blue 45/llx=40 lly=56 lrx=50 lry=56 ulx=40 uly=64 urx=50 ury=64 color=blue 46/llx=50 lly=56 lrx=60 lry=56 ulx=50 uly=64 urx=60 ury=64 color=blue 47/llx=60 lly=56
lrx=70 lry=56 ulx=60 uly=64 urx=70 ury=64 color=blue 48/llx=70 lly=56 lrx=80 lry=56 ulx=70 uly=64 urx=80 ury=64 color=blue 49/llx=80 lly=56 lrx=90 lry=56 ulx=80 uly=64 urx=90 ury=64 color=blue 50/llx=90 lly=56 lrx=100 lry=56 ulx=90 uly=64 urx=100 ury=64
color=blue 51/llx=0 lly=48 lrx=10 lry=48 ulx=0 uly=56 urx=10 ury=56 color=blue 52/llx=10 lly=48 lrx=20 lry=48 ulx=10 uly=56 urx=20 ury=56 color=blue 53/llx=20 lly=48 lrx=30 lry=48 ulx=20 uly=56 urx=30 ury=56 color=blue 54/llx=30 lly=48 lrx=40 lry=48
ulx=30 uly=56 urx=40 ury=56 color=blue 55/llx=40 lly=48 lrx=50 lry=48 ulx=40 uly=56 urx=50 ury=56 color=blue 56/llx=50 lly=48 lrx=60 lry=48 ulx=50 uly=56 urx=60 ury=56 color=blue 57/llx=60 lly=48 lrx=70 lry=48 ulx=60 uly=56 urx=70 ury=56 color=blue
58/llx=70 lly=48 lrx=80 lry=48 ulx=70 uly=56 urx=80 ury=56 color=blue 59/llx=80 lly=48 lrx=90 lry=48 ulx=80 uly=56 urx=90 ury=56 color=blue 60/llx=90 lly=48 lrx=100 lry=48 ulx=90 uly=56 urx=100 ury=56 color=blue 61/llx=0 lly=40 lrx=10 lry=40 ulx=0 uly=48
urx=10 ury=48 color=blue 62/llx=10 lly=40 lrx=20 lry=40 ulx=10 uly=48 urx=20 ury=48 color=blue 63/llx=20 lly=40 lrx=30 lry=40 ulx=20 uly=48 urx=30 ury=48 color=blue 64/llx=30 lly=40 lrx=40 lry=40 ulx=30 uly=48 urx=40 ury=48 color=blue 65/llx=40 lly=40
lrx=50 lry=40 ulx=40 uly=48 urx=50 ury=48 color=blue 66/llx=50 lly=40 lrx=60 lry=40 ulx=50 uly=48 urx=60 ury=48 color=blue 67/llx=60 lly=40 lrx=70 lry=40 ulx=60 uly=48 urx=70 ury=48 color=blue 68/llx=70 lly=40 lrx=80 lry=40 ulx=70 uly=48 urx=80 ury=48
color=blue 69/llx=80 lly=40 lrx=90 lry=40 ulx=80 uly=48 urx=90 ury=48 color=blue 70/llx=90 lly=40 lrx=100 lry=40 ulx=90 uly=48 urx=100 ury=48 color=blue 71/llx=0 lly=32 lrx=10 lry=32 ulx=0 uly=40 urx=10 ury=40 color=blue 72/llx=10 lly=32 lrx=20 lry=32
ulx=10 uly=40 urx=20 ury=40 color=blue 73/llx=20 lly=32 lrx=30 lry=32 ulx=20 uly=40 urx=30 ury=40 color=blue 74/llx=30 lly=32 lrx=40 lry=32 ulx=30 uly=40 urx=40 ury=40 color=blue 75/llx=40 lly=32 lrx=50 lry=32 ulx=40 uly=40 urx=50 ury=40 color=blue
76/llx=50 lly=32 lrx=60 lry=32 ulx=50 uly=40 urx=60 ury=40 color=blue 77/llx=60 lly=32 lrx=70 lry=32 ulx=60 uly=40 urx=70 ury=40 color=blue 78/llx=70 lly=32 lrx=80 lry=32 ulx=70 uly=40 urx=80 ury=40 color=blue 79/llx=80 lly=32 lrx=90 lry=32 ulx=80 uly=40
urx=90 ury=40 color=blue 80/llx=90 lly=32 lrx=100 lry=32 ulx=90 uly=40 urx=100 ury=40 color=blue 81/llx=0 lly=24 lrx=10 lry=24 ulx=0 uly=32 urx=10 ury=32 color=blue 82/llx=10 lly=24 lrx=20 lry=24 ulx=10 uly=32 urx=20 ury=32 color=blue 83/llx=20 lly=24
lrx=30 lry=24 ulx=20 uly=32 urx=30 ury=32 color=blue 84/llx=30 lly=24 lrx=40 lry=24 ulx=30 uly=32 urx=40 ury=32 color=blue 85/llx=40 lly=24 lrx=50 lry=24 ulx=40 uly=32 urx=50 ury=32 color=blue 86/llx=50 lly=24 lrx=60 lry=24 ulx=50 uly=32 urx=60 ury=32
color=blue 87/llx=60 lly=24 lrx=70 lry=24 ulx=60 uly=32 urx=70 ury=32 color=blue 88/llx=70 lly=24 lrx=80 lry=24 ulx=70 uly=32 urx=80 ury=32 color=blue 89/llx=80 lly=24 lrx=90 lry=24 ulx=80 uly=32 urx=90 ury=32 color=blue 90/llx=90 lly=24 lrx=100 lry=24
ulx=90 uly=32 urx=100 ury=32 color=blue 91/llx=0 lly=16 lrx=10 lry=16 ulx=0 uly=24 urx=10 ury=24 color=blue 92/llx=10 lly=16 lrx=20 lry=16 ulx=10 uly=24 urx=20 ury=24 color=blue 93/llx=20 lly=16 lrx=30 lry=16 ulx=20 uly=24 urx=30 ury=24 color=blue
94/llx=30 lly=16 lrx=40 lry=16 ulx=30 uly=24 urx=40 ury=24 color=blue 95/llx=40 lly=16 lrx=50 lry=16 ulx=40 uly=24 urx=50 ury=24 color=blue 96/llx=50 lly=16 lrx=60 lry=16 ulx=50 uly=24 urx=60 ury=24 color=blue 97/llx=60 lly=16 lrx=70 lry=16 ulx=60 uly=24
urx=70 ury=24 color=blue 98/llx=70 lly=16 lrx=80 lry=16 ulx=70 uly=24 urx=80 ury=24 color=blue 99/llx=80 lly=16 lrx=90 lry=16 ulx=80 uly=24 urx=90 ury=24 color=blue 100/llx=90 lly=16 lrx=100 lry=16 ulx=90 uly=24 urx=100 ury=24 color=blue 101/llx=0 lly=8
lrx=10 lry=8 ulx=0 uly=16 urx=10 ury=16 color=blue 102/llx=10 lly=8 lrx=20 lry=8 ulx=10 uly=16 urx=20 ury=16 color=blue 103/llx=20 lly=8 lrx=30 lry=8 ulx=20 uly=16 urx=30 ury=16 color=blue 104/llx=30 lly=8 lrx=40 lry=8 ulx=30 uly=16 urx=40 ury=16
color=blue 105/llx=40 lly=8 lrx=50 lry=8 ulx=40 uly=16 urx=50 ury=16 color=blue 106/llx=50 lly=8 lrx=60 lry=8 ulx=50 uly=16 urx=60 ury=16 color=blue 107/llx=60 lly=8 lrx=70 lry=8 ulx=60 uly=16 urx=70 ury=16 color=blue 108/llx=70 lly=8 lrx=80 lry=8 ulx=70
uly=16 urx=80 ury=16 color=blue 109/llx=80 lly=8 lrx=90 lry=8 ulx=80 uly=16 urx=90 ury=16 color=blue 110/llx=90 lly=8 lrx=100 lry=8 ulx=90 uly=16 urx=100 ury=16 color=blue 111/llx=0 lly=0 lrx=10 lry=0 ulx=0 uly=8 urx=10 ury=8 color=blue 112/llx=10 lly=0
lrx=20 lry=0 ulx=10 uly=8 urx=20 ury=8 color=blue 113/llx=20 lly=0 lrx=30 lry=0 ulx=20 uly=8 urx=30 ury=8 color=blue 114/llx=30 lly=0 lrx=40 lry=0 ulx=30 uly=8 urx=40 ury=8 color=blue 115/llx=40 lly=0 lrx=50 lry=0 ulx=40 uly=8 urx=50 ury=8 color=blue
116/llx=50 lly=0 lrx=60 lry=0 ulx=50 uly=8 urx=60 ury=8 color=blue 117/llx=60 lly=0 lrx=70 lry=0 ulx=60 uly=8 urx=70 ury=8 color=blue 118/llx=70 lly=0 lrx=80 lry=0 ulx=70 uly=8 urx=80 ury=8 color=blue 119/llx=80 lly=0 lrx=90 lry=0 ulx=80 uly=8 urx=90
ury=8 color=blue 120/llx=90 lly=0 lrx=100 lry=0 ulx=90 uly=8 urx=100 ury=8 color=blue ;
template newtemp;
list template;
treplay 1 : gchart 2 :gchart1 3 :gchart2 4 :gchart3 5 :gchart4 6 :gchart5 7 :gchart6 8 :gchart7 9 :gchart8 10 :gchart9 11 :gchart10 12 :gchart11 13 :gchart12 14 :gchart13 15 :gchart14 16 :gchart15 17 :gchart16 18 :gchart17 19 :gchart18 20 :gchart19 21
:gchart20 22 :gchart21 23 :gchart22 24 :gchart23 25 :gchart24 26 :gchart25 27 :gchart26 28 :gchart27 29 :gchart28 30 :gchart29 31 :gchart30 32 :gchart31 33 :gchart32 34 :gchart33 35 :gchart34 36 :gchart35 37 :gchart36 38 :gchart37 39 :gchart38 40
:gchart39 41 :gchart40 42 :gchart41 43 :gchart42 44 :gchart43 45 :gchart44 46 :gchart45 47 :gchart46 48 :gchart47 49 :gchart48 50 :gchart49 51 :gchart50 52 :gchart51 53 :gchart52 54 :gchart53 55 :gchart54 56 :gchart55 57 :gchart56 58 :gchart57 59
:gchart58 60 :gchart59 61 :gchart60 62 :gchart61 63 :gchart62 64 :gchart63 65 :gchart64 66 :gchart65 67 :gchart66 68 :gchart67 69 :gchart68 70 :gchart69 71 :gchart70 72 :gchart71 73 :gchart72 74 :gchart73 75 :gchart74 76 :gchart75 77 :gchart76 78
:gchart77 79 :gchart78 80 :gchart79 81 :gchart80 82 :gchart81 83 :gchart82 84 :gchart83 85 :gchart84 86 :gchart85 87 :gchart86 88 :gchart87 89 :gchart88 90 :gchart89 91 :gchart90 92 :gchart91 93 :gchart92 94 :gchart93 95 :gchart94 96 :gchart95 97
:gchart96 98 :gchart97 99 :gchart98 100 :gchart99 101 :gchar100 102 :gchar101 103 :gchar102 104 :gchar103 105 :gchar104 106 :gchar105 107 :gchar106 108 :gchar107 109 :gchar108 110 :gchar109 111 :gchar110 112 :gchar111 113 :gchar112 114 :gchar113 115
:gchar114 116 :gchar115 117 :gchar116 118 :gchar117 119 :gchar118 120 :gchar119 ;
run;
quit;
filename mydata "C:\Documents and Settings\ewnym5s\My Documents\main1.txt";
data data.Main_201209;
length HHID $ 9 STATE $ 2 ZIP $ 5 RM $ 1;
infile mydata DLM='09'x firstobs=2 lrecl=4096 dsd;
INPUT hhID $ STATE $ ZIP $ BRANCH $ CBR MARKET dda mms sav tda ira sec trs mtg heq card ILN sln sdb ins bus com DDA_Amt MMS_amt sav_amt TDA_Amt IRA_amt sec_Amt trs_amt MTG_amt HEQ_Amt ccs_Amt iln_amt sln_amt IXI_tot IXi_Annuity ixi_Bonds ixi_Funds
ixi_Stocks ixi_Other ixi_Non_Int_Chk ixi_int_chk ixi_savings ixi_MMS ixi_tda source $ WAS WFO segment clv_total clv_rem clv_rem_ten cqi_bp cqi_DD cqi_deb cqi_odl cqi_web web VPOS_AMT vpos_num mpos_amt mpos_num ATMO_AMT ATMO_NUM ATMT_AMT ATMT_NUM
web_signon BP_NUM BP_AMT BR_TR_NUM BR_TR_amt VRU_NUM SMS_NUM WAP_NUM fico_num bp WAP SMS edeliv estat fico FWorks fworks_num band $ band_yr $ IND IND_AMT chk_num dd_amt distance RM tenure tran_code $;
tenure_yr = divide(tenure,365);
hh=1;
grp = 1;
run;
filename mydata "C:\Documents and Settings\ewnym5s\My Documents\main1.txt";
data data.Main_201209;
length HHID $ 9 STATE $ 2 ZIP $ 5 RM $ 1;
infile mydata DLM='09'x firstobs=1 lrecl=4096 dsd missover;
INPUT hhID $ STATE $ ZIP $ BRANCH $ CBR MARKET dda mms sav tda ira sec trs mtg heq card ILN sln sdb ins bus com DDA_Amt MMS_amt sav_amt TDA_Amt IRA_amt sec_Amt trs_amt MTG_amt HEQ_Amt ccs_Amt iln_amt sln_amt IXI_tot IXi_Annuity ixi_Bonds ixi_Funds
ixi_Stocks ixi_Other ixi_Non_Int_Chk ixi_int_chk ixi_savings ixi_MMS ixi_tda source $ WAS WFO segment clv_total clv_rem clv_rem_ten cqi_bp cqi_DD cqi_deb cqi_odl cqi_web web VPOS_AMT vpos_num mpos_amt mpos_num ATMO_AMT ATMO_NUM ATMT_AMT ATMT_NUM
web_signon BP_NUM BP_AMT BR_TR_NUM BR_TR_amt VRU_NUM SMS_NUM WAP_NUM fico_num bp WAP SMS edeliv estat fico FWorks fworks_num band $ band_yr $ IND IND_AMT chk_num dd_amt distance RM tenure tran_code $;
tenure_yr = divide(tenure,365);
hh=1;
grp = 1;
run;
proc contents data=data.main_201209( drop= ) memtype=data noprint out=_cntnts_( keep= name type ) ;
run ;
data _null_ ;
set _cntnts_ end=lastobs nobs=nobs ;
if nobs = 0 then stop ;
n_char + ( type = 2 ) ;
n_num + ( type = 1 ) ;
if lastobs then do ;
call symput( 'N_CHAR', left( put( n_char, 5. ))) ;
call symput( 'N_NUM' , left( put( n_num , 5. ))) ;
end ;
run ;
proc sql noprint ;
select name into :CHAR1 - :CHAR9 from _cntnts_ where type = 2 ;
select name into :NUM1 - :NUM87 from _cntnts_ where type = 1 ;
quit ;
data _null_ ;
set data.main_201209 end=lastobs ;
array _num_len_ ( 87 ) 3 _temporary_ ;
array _char_len_ ( 9 ) _temporary_ ;
if _n_ = 1 then do ;
do i = 1 to 9 ;
_char_len_( i ) = 0 ;
end ;
do i = 1 to 87 ;
_num_len_ ( i ) = 3 ;
end ;
end ;
_char_len_( 1 ) = max( _char_len_( 1 ), length( BRANCH )) ;
_char_len_( 2 ) = max( _char_len_( 2 ), length( HHID )) ;
_char_len_( 3 ) = max( _char_len_( 3 ), length( RM )) ;
_char_len_( 4 ) = max( _char_len_( 4 ), length( STATE )) ;
_char_len_( 5 ) = max( _char_len_( 5 ), length( ZIP )) ;
_char_len_( 6 ) = max( _char_len_( 6 ), length( band )) ;
_char_len_( 7 ) = max( _char_len_( 7 ), length( band_yr )) ;
_char_len_( 8 ) = max( _char_len_( 8 ), length( source )) ;
_char_len_( 9 ) = max( _char_len_( 9 ), length( tran_code )) ;
if ATMO_AMT ne . then do ;
if ATMO_AMT ne trunc( ATMO_AMT, 7 ) then _num_len_( 1 ) = max( _num_len_( 1 ), 8 ) ;
else if ATMO_AMT ne trunc( ATMO_AMT, 6 ) then _num_len_( 1 ) = max( _num_len_( 1 ), 7 ) ;
else if ATMO_AMT ne trunc( ATMO_AMT, 5 ) then _num_len_( 1 ) = max( _num_len_( 1 ), 6 ) ;
else if ATMO_AMT ne trunc( ATMO_AMT, 4 ) then _num_len_( 1 ) = max( _num_len_( 1 ), 5 ) ;
else if ATMO_AMT ne trunc( ATMO_AMT, 3 ) then _num_len_( 1 ) = max( _num_len_( 1 ), 4 ) ;
end ;
if ATMO_NUM ne . then do ;
if ATMO_NUM ne trunc( ATMO_NUM, 7 ) then _num_len_( 2 ) = max( _num_len_( 2 ), 8 ) ;
else if ATMO_NUM ne trunc( ATMO_NUM, 6 ) then _num_len_( 2 ) = max( _num_len_( 2 ), 7 ) ;
else if ATMO_NUM ne trunc( ATMO_NUM, 5 ) then _num_len_( 2 ) = max( _num_len_( 2 ), 6 ) ;
else if ATMO_NUM ne trunc( ATMO_NUM, 4 ) then _num_len_( 2 ) = max( _num_len_( 2 ), 5 ) ;
else if ATMO_NUM ne trunc( ATMO_NUM, 3 ) then _num_len_( 2 ) = max( _num_len_( 2 ), 4 ) ;
end ;
if ATMT_AMT ne . then do ;
if ATMT_AMT ne trunc( ATMT_AMT, 7 ) then _num_len_( 3 ) = max( _num_len_( 3 ), 8 ) ;
else if ATMT_AMT ne trunc( ATMT_AMT, 6 ) then _num_len_( 3 ) = max( _num_len_( 3 ), 7 ) ;
else if ATMT_AMT ne trunc( ATMT_AMT, 5 ) then _num_len_( 3 ) = max( _num_len_( 3 ), 6 ) ;
else if ATMT_AMT ne trunc( ATMT_AMT, 4 ) then _num_len_( 3 ) = max( _num_len_( 3 ), 5 ) ;
else if ATMT_AMT ne trunc( ATMT_AMT, 3 ) then _num_len_( 3 ) = max( _num_len_( 3 ), 4 ) ;
end ;
if ATMT_NUM ne . then do ;
if ATMT_NUM ne trunc( ATMT_NUM, 7 ) then _num_len_( 4 ) = max( _num_len_( 4 ), 8 ) ;
else if ATMT_NUM ne trunc( ATMT_NUM, 6 ) then _num_len_( 4 ) = max( _num_len_( 4 ), 7 ) ;
else if ATMT_NUM ne trunc( ATMT_NUM, 5 ) then _num_len_( 4 ) = max( _num_len_( 4 ), 6 ) ;
else if ATMT_NUM ne trunc( ATMT_NUM, 4 ) then _num_len_( 4 ) = max( _num_len_( 4 ), 5 ) ;
else if ATMT_NUM ne trunc( ATMT_NUM, 3 ) then _num_len_( 4 ) = max( _num_len_( 4 ), 4 ) ;
end ;
if BP_AMT ne . then do ;
if BP_AMT ne trunc( BP_AMT, 7 ) then _num_len_( 5 ) = max( _num_len_( 5 ), 8 ) ;
else if BP_AMT ne trunc( BP_AMT, 6 ) then _num_len_( 5 ) = max( _num_len_( 5 ), 7 ) ;
else if BP_AMT ne trunc( BP_AMT, 5 ) then _num_len_( 5 ) = max( _num_len_( 5 ), 6 ) ;
else if BP_AMT ne trunc( BP_AMT, 4 ) then _num_len_( 5 ) = max( _num_len_( 5 ), 5 ) ;
else if BP_AMT ne trunc( BP_AMT, 3 ) then _num_len_( 5 ) = max( _num_len_( 5 ), 4 ) ;
end ;
if BP_NUM ne . then do ;
if BP_NUM ne trunc( BP_NUM, 7 ) then _num_len_( 6 ) = max( _num_len_( 6 ), 8 ) ;
else if BP_NUM ne trunc( BP_NUM, 6 ) then _num_len_( 6 ) = max( _num_len_( 6 ), 7 ) ;
else if BP_NUM ne trunc( BP_NUM, 5 ) then _num_len_( 6 ) = max( _num_len_( 6 ), 6 ) ;
else if BP_NUM ne trunc( BP_NUM, 4 ) then _num_len_( 6 ) = max( _num_len_( 6 ), 5 ) ;
else if BP_NUM ne trunc( BP_NUM, 3 ) then _num_len_( 6 ) = max( _num_len_( 6 ), 4 ) ;
end ;
if BR_TR_NUM ne . then do ;
if BR_TR_NUM ne trunc( BR_TR_NUM, 7 ) then _num_len_( 7 ) = max( _num_len_( 7 ), 8 ) ;
else if BR_TR_NUM ne trunc( BR_TR_NUM, 6 ) then _num_len_( 7 ) = max( _num_len_( 7 ), 7 ) ;
else if BR_TR_NUM ne trunc( BR_TR_NUM, 5 ) then _num_len_( 7 ) = max( _num_len_( 7 ), 6 ) ;
else if BR_TR_NUM ne trunc( BR_TR_NUM, 4 ) then _num_len_( 7 ) = max( _num_len_( 7 ), 5 ) ;
else if BR_TR_NUM ne trunc( BR_TR_NUM, 3 ) then _num_len_( 7 ) = max( _num_len_( 7 ), 4 ) ;
end ;
if BR_TR_amt ne . then do ;
if BR_TR_amt ne trunc( BR_TR_amt, 7 ) then _num_len_( 8 ) = max( _num_len_( 8 ), 8 ) ;
else if BR_TR_amt ne trunc( BR_TR_amt, 6 ) then _num_len_( 8 ) = max( _num_len_( 8 ), 7 ) ;
else if BR_TR_amt ne trunc( BR_TR_amt, 5 ) then _num_len_( 8 ) = max( _num_len_( 8 ), 6 ) ;
else if BR_TR_amt ne trunc( BR_TR_amt, 4 ) then _num_len_( 8 ) = max( _num_len_( 8 ), 5 ) ;
else if BR_TR_amt ne trunc( BR_TR_amt, 3 ) then _num_len_( 8 ) = max( _num_len_( 8 ), 4 ) ;
end ;
if CBR ne . then do ;
if CBR ne trunc( CBR, 7 ) then _num_len_( 9 ) = max( _num_len_( 9 ), 8 ) ;
else if CBR ne trunc( CBR, 6 ) then _num_len_( 9 ) = max( _num_len_( 9 ), 7 ) ;
else if CBR ne trunc( CBR, 5 ) then _num_len_( 9 ) = max( _num_len_( 9 ), 6 ) ;
else if CBR ne trunc( CBR, 4 ) then _num_len_( 9 ) = max( _num_len_( 9 ), 5 ) ;
else if CBR ne trunc( CBR, 3 ) then _num_len_( 9 ) = max( _num_len_( 9 ), 4 ) ;
end ;
if DDA_Amt ne . then do ;
if DDA_Amt ne trunc( DDA_Amt, 7 ) then _num_len_( 10 ) = max( _num_len_( 10 ), 8 ) ;
else if DDA_Amt ne trunc( DDA_Amt, 6 ) then _num_len_( 10 ) = max( _num_len_( 10 ), 7 ) ;
else if DDA_Amt ne trunc( DDA_Amt, 5 ) then _num_len_( 10 ) = max( _num_len_( 10 ), 6 ) ;
else if DDA_Amt ne trunc( DDA_Amt, 4 ) then _num_len_( 10 ) = max( _num_len_( 10 ), 5 ) ;
else if DDA_Amt ne trunc( DDA_Amt, 3 ) then _num_len_( 10 ) = max( _num_len_( 10 ), 4 ) ;
end ;
if FWorks ne . then do ;
if FWorks ne trunc( FWorks, 7 ) then _num_len_( 11 ) = max( _num_len_( 11 ), 8 ) ;
else if FWorks ne trunc( FWorks, 6 ) then _num_len_( 11 ) = max( _num_len_( 11 ), 7 ) ;
else if FWorks ne trunc( FWorks, 5 ) then _num_len_( 11 ) = max( _num_len_( 11 ), 6 ) ;
else if FWorks ne trunc( FWorks, 4 ) then _num_len_( 11 ) = max( _num_len_( 11 ), 5 ) ;
else if FWorks ne trunc( FWorks, 3 ) then _num_len_( 11 ) = max( _num_len_( 11 ), 4 ) ;
end ;
if HEQ_Amt ne . then do ;
if HEQ_Amt ne trunc( HEQ_Amt, 7 ) then _num_len_( 12 ) = max( _num_len_( 12 ), 8 ) ;
else if HEQ_Amt ne trunc( HEQ_Amt, 6 ) then _num_len_( 12 ) = max( _num_len_( 12 ), 7 ) ;
else if HEQ_Amt ne trunc( HEQ_Amt, 5 ) then _num_len_( 12 ) = max( _num_len_( 12 ), 6 ) ;
else if HEQ_Amt ne trunc( HEQ_Amt, 4 ) then _num_len_( 12 ) = max( _num_len_( 12 ), 5 ) ;
else if HEQ_Amt ne trunc( HEQ_Amt, 3 ) then _num_len_( 12 ) = max( _num_len_( 12 ), 4 ) ;
end ;
if ILN ne . then do ;
if ILN ne trunc( ILN, 7 ) then _num_len_( 13 ) = max( _num_len_( 13 ), 8 ) ;
else if ILN ne trunc( ILN, 6 ) then _num_len_( 13 ) = max( _num_len_( 13 ), 7 ) ;
else if ILN ne trunc( ILN, 5 ) then _num_len_( 13 ) = max( _num_len_( 13 ), 6 ) ;
else if ILN ne trunc( ILN, 4 ) then _num_len_( 13 ) = max( _num_len_( 13 ), 5 ) ;
else if ILN ne trunc( ILN, 3 ) then _num_len_( 13 ) = max( _num_len_( 13 ), 4 ) ;
end ;
if IND ne . then do ;
if IND ne trunc( IND, 7 ) then _num_len_( 14 ) = max( _num_len_( 14 ), 8 ) ;
else if IND ne trunc( IND, 6 ) then _num_len_( 14 ) = max( _num_len_( 14 ), 7 ) ;
else if IND ne trunc( IND, 5 ) then _num_len_( 14 ) = max( _num_len_( 14 ), 6 ) ;
else if IND ne trunc( IND, 4 ) then _num_len_( 14 ) = max( _num_len_( 14 ), 5 ) ;
else if IND ne trunc( IND, 3 ) then _num_len_( 14 ) = max( _num_len_( 14 ), 4 ) ;
end ;
if IND_AMT ne . then do ;
if IND_AMT ne trunc( IND_AMT, 7 ) then _num_len_( 15 ) = max( _num_len_( 15 ), 8 ) ;
else if IND_AMT ne trunc( IND_AMT, 6 ) then _num_len_( 15 ) = max( _num_len_( 15 ), 7 ) ;
else if IND_AMT ne trunc( IND_AMT, 5 ) then _num_len_( 15 ) = max( _num_len_( 15 ), 6 ) ;
else if IND_AMT ne trunc( IND_AMT, 4 ) then _num_len_( 15 ) = max( _num_len_( 15 ), 5 ) ;
else if IND_AMT ne trunc( IND_AMT, 3 ) then _num_len_( 15 ) = max( _num_len_( 15 ), 4 ) ;
end ;
if IRA_amt ne . then do ;
if IRA_amt ne trunc( IRA_amt, 7 ) then _num_len_( 16 ) = max( _num_len_( 16 ), 8 ) ;
else if IRA_amt ne trunc( IRA_amt, 6 ) then _num_len_( 16 ) = max( _num_len_( 16 ), 7 ) ;
else if IRA_amt ne trunc( IRA_amt, 5 ) then _num_len_( 16 ) = max( _num_len_( 16 ), 6 ) ;
else if IRA_amt ne trunc( IRA_amt, 4 ) then _num_len_( 16 ) = max( _num_len_( 16 ), 5 ) ;
else if IRA_amt ne trunc( IRA_amt, 3 ) then _num_len_( 16 ) = max( _num_len_( 16 ), 4 ) ;
end ;
if IXI_tot ne . then do ;
if IXI_tot ne trunc( IXI_tot, 7 ) then _num_len_( 17 ) = max( _num_len_( 17 ), 8 ) ;
else if IXI_tot ne trunc( IXI_tot, 6 ) then _num_len_( 17 ) = max( _num_len_( 17 ), 7 ) ;
else if IXI_tot ne trunc( IXI_tot, 5 ) then _num_len_( 17 ) = max( _num_len_( 17 ), 6 ) ;
else if IXI_tot ne trunc( IXI_tot, 4 ) then _num_len_( 17 ) = max( _num_len_( 17 ), 5 ) ;
else if IXI_tot ne trunc( IXI_tot, 3 ) then _num_len_( 17 ) = max( _num_len_( 17 ), 4 ) ;
end ;
if IXi_Annuity ne . then do ;
if IXi_Annuity ne trunc( IXi_Annuity, 7 ) then _num_len_( 18 ) = max( _num_len_( 18 ), 8 ) ;
else if IXi_Annuity ne trunc( IXi_Annuity, 6 ) then _num_len_( 18 ) = max( _num_len_( 18 ), 7 ) ;
else if IXi_Annuity ne trunc( IXi_Annuity, 5 ) then _num_len_( 18 ) = max( _num_len_( 18 ), 6 ) ;
else if IXi_Annuity ne trunc( IXi_Annuity, 4 ) then _num_len_( 18 ) = max( _num_len_( 18 ), 5 ) ;
else if IXi_Annuity ne trunc( IXi_Annuity, 3 ) then _num_len_( 18 ) = max( _num_len_( 18 ), 4 ) ;
end ;
if MARKET ne . then do ;
if MARKET ne trunc( MARKET, 7 ) then _num_len_( 19 ) = max( _num_len_( 19 ), 8 ) ;
else if MARKET ne trunc( MARKET, 6 ) then _num_len_( 19 ) = max( _num_len_( 19 ), 7 ) ;
else if MARKET ne trunc( MARKET, 5 ) then _num_len_( 19 ) = max( _num_len_( 19 ), 6 ) ;
else if MARKET ne trunc( MARKET, 4 ) then _num_len_( 19 ) = max( _num_len_( 19 ), 5 ) ;
else if MARKET ne trunc( MARKET, 3 ) then _num_len_( 19 ) = max( _num_len_( 19 ), 4 ) ;
end ;
if MMS_amt ne . then do ;
if MMS_amt ne trunc( MMS_amt, 7 ) then _num_len_( 20 ) = max( _num_len_( 20 ), 8 ) ;
else if MMS_amt ne trunc( MMS_amt, 6 ) then _num_len_( 20 ) = max( _num_len_( 20 ), 7 ) ;
else if MMS_amt ne trunc( MMS_amt, 5 ) then _num_len_( 20 ) = max( _num_len_( 20 ), 6 ) ;
else if MMS_amt ne trunc( MMS_amt, 4 ) then _num_len_( 20 ) = max( _num_len_( 20 ), 5 ) ;
else if MMS_amt ne trunc( MMS_amt, 3 ) then _num_len_( 20 ) = max( _num_len_( 20 ), 4 ) ;
end ;
if MTG_amt ne . then do ;
if MTG_amt ne trunc( MTG_amt, 7 ) then _num_len_( 21 ) = max( _num_len_( 21 ), 8 ) ;
else if MTG_amt ne trunc( MTG_amt, 6 ) then _num_len_( 21 ) = max( _num_len_( 21 ), 7 ) ;
else if MTG_amt ne trunc( MTG_amt, 5 ) then _num_len_( 21 ) = max( _num_len_( 21 ), 6 ) ;
else if MTG_amt ne trunc( MTG_amt, 4 ) then _num_len_( 21 ) = max( _num_len_( 21 ), 5 ) ;
else if MTG_amt ne trunc( MTG_amt, 3 ) then _num_len_( 21 ) = max( _num_len_( 21 ), 4 ) ;
end ;
if SMS ne . then do ;
if SMS ne trunc( SMS, 7 ) then _num_len_( 22 ) = max( _num_len_( 22 ), 8 ) ;
else if SMS ne trunc( SMS, 6 ) then _num_len_( 22 ) = max( _num_len_( 22 ), 7 ) ;
else if SMS ne trunc( SMS, 5 ) then _num_len_( 22 ) = max( _num_len_( 22 ), 6 ) ;
else if SMS ne trunc( SMS, 4 ) then _num_len_( 22 ) = max( _num_len_( 22 ), 5 ) ;
else if SMS ne trunc( SMS, 3 ) then _num_len_( 22 ) = max( _num_len_( 22 ), 4 ) ;
end ;
if SMS_NUM ne . then do ;
if SMS_NUM ne trunc( SMS_NUM, 7 ) then _num_len_( 23 ) = max( _num_len_( 23 ), 8 ) ;
else if SMS_NUM ne trunc( SMS_NUM, 6 ) then _num_len_( 23 ) = max( _num_len_( 23 ), 7 ) ;
else if SMS_NUM ne trunc( SMS_NUM, 5 ) then _num_len_( 23 ) = max( _num_len_( 23 ), 6 ) ;
else if SMS_NUM ne trunc( SMS_NUM, 4 ) then _num_len_( 23 ) = max( _num_len_( 23 ), 5 ) ;
else if SMS_NUM ne trunc( SMS_NUM, 3 ) then _num_len_( 23 ) = max( _num_len_( 23 ), 4 ) ;
end ;
if TDA_Amt ne . then do ;
if TDA_Amt ne trunc( TDA_Amt, 7 ) then _num_len_( 24 ) = max( _num_len_( 24 ), 8 ) ;
else if TDA_Amt ne trunc( TDA_Amt, 6 ) then _num_len_( 24 ) = max( _num_len_( 24 ), 7 ) ;
else if TDA_Amt ne trunc( TDA_Amt, 5 ) then _num_len_( 24 ) = max( _num_len_( 24 ), 6 ) ;
else if TDA_Amt ne trunc( TDA_Amt, 4 ) then _num_len_( 24 ) = max( _num_len_( 24 ), 5 ) ;
else if TDA_Amt ne trunc( TDA_Amt, 3 ) then _num_len_( 24 ) = max( _num_len_( 24 ), 4 ) ;
end ;
if VPOS_AMT ne . then do ;
if VPOS_AMT ne trunc( VPOS_AMT, 7 ) then _num_len_( 25 ) = max( _num_len_( 25 ), 8 ) ;
else if VPOS_AMT ne trunc( VPOS_AMT, 6 ) then _num_len_( 25 ) = max( _num_len_( 25 ), 7 ) ;
else if VPOS_AMT ne trunc( VPOS_AMT, 5 ) then _num_len_( 25 ) = max( _num_len_( 25 ), 6 ) ;
else if VPOS_AMT ne trunc( VPOS_AMT, 4 ) then _num_len_( 25 ) = max( _num_len_( 25 ), 5 ) ;
else if VPOS_AMT ne trunc( VPOS_AMT, 3 ) then _num_len_( 25 ) = max( _num_len_( 25 ), 4 ) ;
end ;
if VRU_NUM ne . then do ;
if VRU_NUM ne trunc( VRU_NUM, 7 ) then _num_len_( 26 ) = max( _num_len_( 26 ), 8 ) ;
else if VRU_NUM ne trunc( VRU_NUM, 6 ) then _num_len_( 26 ) = max( _num_len_( 26 ), 7 ) ;
else if VRU_NUM ne trunc( VRU_NUM, 5 ) then _num_len_( 26 ) = max( _num_len_( 26 ), 6 ) ;
else if VRU_NUM ne trunc( VRU_NUM, 4 ) then _num_len_( 26 ) = max( _num_len_( 26 ), 5 ) ;
else if VRU_NUM ne trunc( VRU_NUM, 3 ) then _num_len_( 26 ) = max( _num_len_( 26 ), 4 ) ;
end ;
if WAP ne . then do ;
if WAP ne trunc( WAP, 7 ) then _num_len_( 27 ) = max( _num_len_( 27 ), 8 ) ;
else if WAP ne trunc( WAP, 6 ) then _num_len_( 27 ) = max( _num_len_( 27 ), 7 ) ;
else if WAP ne trunc( WAP, 5 ) then _num_len_( 27 ) = max( _num_len_( 27 ), 6 ) ;
else if WAP ne trunc( WAP, 4 ) then _num_len_( 27 ) = max( _num_len_( 27 ), 5 ) ;
else if WAP ne trunc( WAP, 3 ) then _num_len_( 27 ) = max( _num_len_( 27 ), 4 ) ;
end ;
if WAP_NUM ne . then do ;
if WAP_NUM ne trunc( WAP_NUM, 7 ) then _num_len_( 28 ) = max( _num_len_( 28 ), 8 ) ;
else if WAP_NUM ne trunc( WAP_NUM, 6 ) then _num_len_( 28 ) = max( _num_len_( 28 ), 7 ) ;
else if WAP_NUM ne trunc( WAP_NUM, 5 ) then _num_len_( 28 ) = max( _num_len_( 28 ), 6 ) ;
else if WAP_NUM ne trunc( WAP_NUM, 4 ) then _num_len_( 28 ) = max( _num_len_( 28 ), 5 ) ;
else if WAP_NUM ne trunc( WAP_NUM, 3 ) then _num_len_( 28 ) = max( _num_len_( 28 ), 4 ) ;
end ;
if WAS ne . then do ;
if WAS ne trunc( WAS, 7 ) then _num_len_( 29 ) = max( _num_len_( 29 ), 8 ) ;
else if WAS ne trunc( WAS, 6 ) then _num_len_( 29 ) = max( _num_len_( 29 ), 7 ) ;
else if WAS ne trunc( WAS, 5 ) then _num_len_( 29 ) = max( _num_len_( 29 ), 6 ) ;
else if WAS ne trunc( WAS, 4 ) then _num_len_( 29 ) = max( _num_len_( 29 ), 5 ) ;
else if WAS ne trunc( WAS, 3 ) then _num_len_( 29 ) = max( _num_len_( 29 ), 4 ) ;
end ;
if WFO ne . then do ;
if WFO ne trunc( WFO, 7 ) then _num_len_( 30 ) = max( _num_len_( 30 ), 8 ) ;
else if WFO ne trunc( WFO, 6 ) then _num_len_( 30 ) = max( _num_len_( 30 ), 7 ) ;
else if WFO ne trunc( WFO, 5 ) then _num_len_( 30 ) = max( _num_len_( 30 ), 6 ) ;
else if WFO ne trunc( WFO, 4 ) then _num_len_( 30 ) = max( _num_len_( 30 ), 5 ) ;
else if WFO ne trunc( WFO, 3 ) then _num_len_( 30 ) = max( _num_len_( 30 ), 4 ) ;
end ;
if bp ne . then do ;
if bp ne trunc( bp, 7 ) then _num_len_( 31 ) = max( _num_len_( 31 ), 8 ) ;
else if bp ne trunc( bp, 6 ) then _num_len_( 31 ) = max( _num_len_( 31 ), 7 ) ;
else if bp ne trunc( bp, 5 ) then _num_len_( 31 ) = max( _num_len_( 31 ), 6 ) ;
else if bp ne trunc( bp, 4 ) then _num_len_( 31 ) = max( _num_len_( 31 ), 5 ) ;
else if bp ne trunc( bp, 3 ) then _num_len_( 31 ) = max( _num_len_( 31 ), 4 ) ;
end ;
if bus ne . then do ;
if bus ne trunc( bus, 7 ) then _num_len_( 32 ) = max( _num_len_( 32 ), 8 ) ;
else if bus ne trunc( bus, 6 ) then _num_len_( 32 ) = max( _num_len_( 32 ), 7 ) ;
else if bus ne trunc( bus, 5 ) then _num_len_( 32 ) = max( _num_len_( 32 ), 6 ) ;
else if bus ne trunc( bus, 4 ) then _num_len_( 32 ) = max( _num_len_( 32 ), 5 ) ;
else if bus ne trunc( bus, 3 ) then _num_len_( 32 ) = max( _num_len_( 32 ), 4 ) ;
end ;
if card ne . then do ;
if card ne trunc( card, 7 ) then _num_len_( 33 ) = max( _num_len_( 33 ), 8 ) ;
else if card ne trunc( card, 6 ) then _num_len_( 33 ) = max( _num_len_( 33 ), 7 ) ;
else if card ne trunc( card, 5 ) then _num_len_( 33 ) = max( _num_len_( 33 ), 6 ) ;
else if card ne trunc( card, 4 ) then _num_len_( 33 ) = max( _num_len_( 33 ), 5 ) ;
else if card ne trunc( card, 3 ) then _num_len_( 33 ) = max( _num_len_( 33 ), 4 ) ;
end ;
if ccs_Amt ne . then do ;
if ccs_Amt ne trunc( ccs_Amt, 7 ) then _num_len_( 34 ) = max( _num_len_( 34 ), 8 ) ;
else if ccs_Amt ne trunc( ccs_Amt, 6 ) then _num_len_( 34 ) = max( _num_len_( 34 ), 7 ) ;
else if ccs_Amt ne trunc( ccs_Amt, 5 ) then _num_len_( 34 ) = max( _num_len_( 34 ), 6 ) ;
else if ccs_Amt ne trunc( ccs_Amt, 4 ) then _num_len_( 34 ) = max( _num_len_( 34 ), 5 ) ;
else if ccs_Amt ne trunc( ccs_Amt, 3 ) then _num_len_( 34 ) = max( _num_len_( 34 ), 4 ) ;
end ;
if chk_num ne . then do ;
if chk_num ne trunc( chk_num, 7 ) then _num_len_( 35 ) = max( _num_len_( 35 ), 8 ) ;
else if chk_num ne trunc( chk_num, 6 ) then _num_len_( 35 ) = max( _num_len_( 35 ), 7 ) ;
else if chk_num ne trunc( chk_num, 5 ) then _num_len_( 35 ) = max( _num_len_( 35 ), 6 ) ;
else if chk_num ne trunc( chk_num, 4 ) then _num_len_( 35 ) = max( _num_len_( 35 ), 5 ) ;
else if chk_num ne trunc( chk_num, 3 ) then _num_len_( 35 ) = max( _num_len_( 35 ), 4 ) ;
end ;
if clv_rem ne . then do ;
if clv_rem ne trunc( clv_rem, 7 ) then _num_len_( 36 ) = max( _num_len_( 36 ), 8 ) ;
else if clv_rem ne trunc( clv_rem, 6 ) then _num_len_( 36 ) = max( _num_len_( 36 ), 7 ) ;
else if clv_rem ne trunc( clv_rem, 5 ) then _num_len_( 36 ) = max( _num_len_( 36 ), 6 ) ;
else if clv_rem ne trunc( clv_rem, 4 ) then _num_len_( 36 ) = max( _num_len_( 36 ), 5 ) ;
else if clv_rem ne trunc( clv_rem, 3 ) then _num_len_( 36 ) = max( _num_len_( 36 ), 4 ) ;
end ;
if clv_rem_ten ne . then do ;
if clv_rem_ten ne trunc( clv_rem_ten, 7 ) then _num_len_( 37 ) = max( _num_len_( 37 ), 8 ) ;
else if clv_rem_ten ne trunc( clv_rem_ten, 6 ) then _num_len_( 37 ) = max( _num_len_( 37 ), 7 ) ;
else if clv_rem_ten ne trunc( clv_rem_ten, 5 ) then _num_len_( 37 ) = max( _num_len_( 37 ), 6 ) ;
else if clv_rem_ten ne trunc( clv_rem_ten, 4 ) then _num_len_( 37 ) = max( _num_len_( 37 ), 5 ) ;
else if clv_rem_ten ne trunc( clv_rem_ten, 3 ) then _num_len_( 37 ) = max( _num_len_( 37 ), 4 ) ;
end ;
if clv_total ne . then do ;
if clv_total ne trunc( clv_total, 7 ) then _num_len_( 38 ) = max( _num_len_( 38 ), 8 ) ;
else if clv_total ne trunc( clv_total, 6 ) then _num_len_( 38 ) = max( _num_len_( 38 ), 7 ) ;
else if clv_total ne trunc( clv_total, 5 ) then _num_len_( 38 ) = max( _num_len_( 38 ), 6 ) ;
else if clv_total ne trunc( clv_total, 4 ) then _num_len_( 38 ) = max( _num_len_( 38 ), 5 ) ;
else if clv_total ne trunc( clv_total, 3 ) then _num_len_( 38 ) = max( _num_len_( 38 ), 4 ) ;
end ;
if com ne . then do ;
if com ne trunc( com, 7 ) then _num_len_( 39 ) = max( _num_len_( 39 ), 8 ) ;
else if com ne trunc( com, 6 ) then _num_len_( 39 ) = max( _num_len_( 39 ), 7 ) ;
else if com ne trunc( com, 5 ) then _num_len_( 39 ) = max( _num_len_( 39 ), 6 ) ;
else if com ne trunc( com, 4 ) then _num_len_( 39 ) = max( _num_len_( 39 ), 5 ) ;
else if com ne trunc( com, 3 ) then _num_len_( 39 ) = max( _num_len_( 39 ), 4 ) ;
end ;
if cqi_DD ne . then do ;
if cqi_DD ne trunc( cqi_DD, 7 ) then _num_len_( 40 ) = max( _num_len_( 40 ), 8 ) ;
else if cqi_DD ne trunc( cqi_DD, 6 ) then _num_len_( 40 ) = max( _num_len_( 40 ), 7 ) ;
else if cqi_DD ne trunc( cqi_DD, 5 ) then _num_len_( 40 ) = max( _num_len_( 40 ), 6 ) ;
else if cqi_DD ne trunc( cqi_DD, 4 ) then _num_len_( 40 ) = max( _num_len_( 40 ), 5 ) ;
else if cqi_DD ne trunc( cqi_DD, 3 ) then _num_len_( 40 ) = max( _num_len_( 40 ), 4 ) ;
end ;
if cqi_bp ne . then do ;
if cqi_bp ne trunc( cqi_bp, 7 ) then _num_len_( 41 ) = max( _num_len_( 41 ), 8 ) ;
else if cqi_bp ne trunc( cqi_bp, 6 ) then _num_len_( 41 ) = max( _num_len_( 41 ), 7 ) ;
else if cqi_bp ne trunc( cqi_bp, 5 ) then _num_len_( 41 ) = max( _num_len_( 41 ), 6 ) ;
else if cqi_bp ne trunc( cqi_bp, 4 ) then _num_len_( 41 ) = max( _num_len_( 41 ), 5 ) ;
else if cqi_bp ne trunc( cqi_bp, 3 ) then _num_len_( 41 ) = max( _num_len_( 41 ), 4 ) ;
end ;
if cqi_deb ne . then do ;
if cqi_deb ne trunc( cqi_deb, 7 ) then _num_len_( 42 ) = max( _num_len_( 42 ), 8 ) ;
else if cqi_deb ne trunc( cqi_deb, 6 ) then _num_len_( 42 ) = max( _num_len_( 42 ), 7 ) ;
else if cqi_deb ne trunc( cqi_deb, 5 ) then _num_len_( 42 ) = max( _num_len_( 42 ), 6 ) ;
else if cqi_deb ne trunc( cqi_deb, 4 ) then _num_len_( 42 ) = max( _num_len_( 42 ), 5 ) ;
else if cqi_deb ne trunc( cqi_deb, 3 ) then _num_len_( 42 ) = max( _num_len_( 42 ), 4 ) ;
end ;
if cqi_odl ne . then do ;
if cqi_odl ne trunc( cqi_odl, 7 ) then _num_len_( 43 ) = max( _num_len_( 43 ), 8 ) ;
else if cqi_odl ne trunc( cqi_odl, 6 ) then _num_len_( 43 ) = max( _num_len_( 43 ), 7 ) ;
else if cqi_odl ne trunc( cqi_odl, 5 ) then _num_len_( 43 ) = max( _num_len_( 43 ), 6 ) ;
else if cqi_odl ne trunc( cqi_odl, 4 ) then _num_len_( 43 ) = max( _num_len_( 43 ), 5 ) ;
else if cqi_odl ne trunc( cqi_odl, 3 ) then _num_len_( 43 ) = max( _num_len_( 43 ), 4 ) ;
end ;
if cqi_web ne . then do ;
if cqi_web ne trunc( cqi_web, 7 ) then _num_len_( 44 ) = max( _num_len_( 44 ), 8 ) ;
else if cqi_web ne trunc( cqi_web, 6 ) then _num_len_( 44 ) = max( _num_len_( 44 ), 7 ) ;
else if cqi_web ne trunc( cqi_web, 5 ) then _num_len_( 44 ) = max( _num_len_( 44 ), 6 ) ;
else if cqi_web ne trunc( cqi_web, 4 ) then _num_len_( 44 ) = max( _num_len_( 44 ), 5 ) ;
else if cqi_web ne trunc( cqi_web, 3 ) then _num_len_( 44 ) = max( _num_len_( 44 ), 4 ) ;
end ;
if dd_amt ne . then do ;
if dd_amt ne trunc( dd_amt, 7 ) then _num_len_( 45 ) = max( _num_len_( 45 ), 8 ) ;
else if dd_amt ne trunc( dd_amt, 6 ) then _num_len_( 45 ) = max( _num_len_( 45 ), 7 ) ;
else if dd_amt ne trunc( dd_amt, 5 ) then _num_len_( 45 ) = max( _num_len_( 45 ), 6 ) ;
else if dd_amt ne trunc( dd_amt, 4 ) then _num_len_( 45 ) = max( _num_len_( 45 ), 5 ) ;
else if dd_amt ne trunc( dd_amt, 3 ) then _num_len_( 45 ) = max( _num_len_( 45 ), 4 ) ;
end ;
if dda ne . then do ;
if dda ne trunc( dda, 7 ) then _num_len_( 46 ) = max( _num_len_( 46 ), 8 ) ;
else if dda ne trunc( dda, 6 ) then _num_len_( 46 ) = max( _num_len_( 46 ), 7 ) ;
else if dda ne trunc( dda, 5 ) then _num_len_( 46 ) = max( _num_len_( 46 ), 6 ) ;
else if dda ne trunc( dda, 4 ) then _num_len_( 46 ) = max( _num_len_( 46 ), 5 ) ;
else if dda ne trunc( dda, 3 ) then _num_len_( 46 ) = max( _num_len_( 46 ), 4 ) ;
end ;
if distance ne . then do ;
if distance ne trunc( distance, 7 ) then _num_len_( 47 ) = max( _num_len_( 47 ), 8 ) ;
else if distance ne trunc( distance, 6 ) then _num_len_( 47 ) = max( _num_len_( 47 ), 7 ) ;
else if distance ne trunc( distance, 5 ) then _num_len_( 47 ) = max( _num_len_( 47 ), 6 ) ;
else if distance ne trunc( distance, 4 ) then _num_len_( 47 ) = max( _num_len_( 47 ), 5 ) ;
else if distance ne trunc( distance, 3 ) then _num_len_( 47 ) = max( _num_len_( 47 ), 4 ) ;
end ;
if edeliv ne . then do ;
if edeliv ne trunc( edeliv, 7 ) then _num_len_( 48 ) = max( _num_len_( 48 ), 8 ) ;
else if edeliv ne trunc( edeliv, 6 ) then _num_len_( 48 ) = max( _num_len_( 48 ), 7 ) ;
else if edeliv ne trunc( edeliv, 5 ) then _num_len_( 48 ) = max( _num_len_( 48 ), 6 ) ;
else if edeliv ne trunc( edeliv, 4 ) then _num_len_( 48 ) = max( _num_len_( 48 ), 5 ) ;
else if edeliv ne trunc( edeliv, 3 ) then _num_len_( 48 ) = max( _num_len_( 48 ), 4 ) ;
end ;
if estat ne . then do ;
if estat ne trunc( estat, 7 ) then _num_len_( 49 ) = max( _num_len_( 49 ), 8 ) ;
else if estat ne trunc( estat, 6 ) then _num_len_( 49 ) = max( _num_len_( 49 ), 7 ) ;
else if estat ne trunc( estat, 5 ) then _num_len_( 49 ) = max( _num_len_( 49 ), 6 ) ;
else if estat ne trunc( estat, 4 ) then _num_len_( 49 ) = max( _num_len_( 49 ), 5 ) ;
else if estat ne trunc( estat, 3 ) then _num_len_( 49 ) = max( _num_len_( 49 ), 4 ) ;
end ;
if fico ne . then do ;
if fico ne trunc( fico, 7 ) then _num_len_( 50 ) = max( _num_len_( 50 ), 8 ) ;
else if fico ne trunc( fico, 6 ) then _num_len_( 50 ) = max( _num_len_( 50 ), 7 ) ;
else if fico ne trunc( fico, 5 ) then _num_len_( 50 ) = max( _num_len_( 50 ), 6 ) ;
else if fico ne trunc( fico, 4 ) then _num_len_( 50 ) = max( _num_len_( 50 ), 5 ) ;
else if fico ne trunc( fico, 3 ) then _num_len_( 50 ) = max( _num_len_( 50 ), 4 ) ;
end ;
if fico_num ne . then do ;
if fico_num ne trunc( fico_num, 7 ) then _num_len_( 51 ) = max( _num_len_( 51 ), 8 ) ;
else if fico_num ne trunc( fico_num, 6 ) then _num_len_( 51 ) = max( _num_len_( 51 ), 7 ) ;
else if fico_num ne trunc( fico_num, 5 ) then _num_len_( 51 ) = max( _num_len_( 51 ), 6 ) ;
else if fico_num ne trunc( fico_num, 4 ) then _num_len_( 51 ) = max( _num_len_( 51 ), 5 ) ;
else if fico_num ne trunc( fico_num, 3 ) then _num_len_( 51 ) = max( _num_len_( 51 ), 4 ) ;
end ;
if fworks_num ne . then do ;
if fworks_num ne trunc( fworks_num, 7 ) then _num_len_( 52 ) = max( _num_len_( 52 ), 8 ) ;
else if fworks_num ne trunc( fworks_num, 6 ) then _num_len_( 52 ) = max( _num_len_( 52 ), 7 ) ;
else if fworks_num ne trunc( fworks_num, 5 ) then _num_len_( 52 ) = max( _num_len_( 52 ), 6 ) ;
else if fworks_num ne trunc( fworks_num, 4 ) then _num_len_( 52 ) = max( _num_len_( 52 ), 5 ) ;
else if fworks_num ne trunc( fworks_num, 3 ) then _num_len_( 52 ) = max( _num_len_( 52 ), 4 ) ;
end ;
if grp ne . then do ;
if grp ne trunc( grp, 7 ) then _num_len_( 53 ) = max( _num_len_( 53 ), 8 ) ;
else if grp ne trunc( grp, 6 ) then _num_len_( 53 ) = max( _num_len_( 53 ), 7 ) ;
else if grp ne trunc( grp, 5 ) then _num_len_( 53 ) = max( _num_len_( 53 ), 6 ) ;
else if grp ne trunc( grp, 4 ) then _num_len_( 53 ) = max( _num_len_( 53 ), 5 ) ;
else if grp ne trunc( grp, 3 ) then _num_len_( 53 ) = max( _num_len_( 53 ), 4 ) ;
end ;
if heq ne . then do ;
if heq ne trunc( heq, 7 ) then _num_len_( 54 ) = max( _num_len_( 54 ), 8 ) ;
else if heq ne trunc( heq, 6 ) then _num_len_( 54 ) = max( _num_len_( 54 ), 7 ) ;
else if heq ne trunc( heq, 5 ) then _num_len_( 54 ) = max( _num_len_( 54 ), 6 ) ;
else if heq ne trunc( heq, 4 ) then _num_len_( 54 ) = max( _num_len_( 54 ), 5 ) ;
else if heq ne trunc( heq, 3 ) then _num_len_( 54 ) = max( _num_len_( 54 ), 4 ) ;
end ;
if hh ne . then do ;
if hh ne trunc( hh, 7 ) then _num_len_( 55 ) = max( _num_len_( 55 ), 8 ) ;
else if hh ne trunc( hh, 6 ) then _num_len_( 55 ) = max( _num_len_( 55 ), 7 ) ;
else if hh ne trunc( hh, 5 ) then _num_len_( 55 ) = max( _num_len_( 55 ), 6 ) ;
else if hh ne trunc( hh, 4 ) then _num_len_( 55 ) = max( _num_len_( 55 ), 5 ) ;
else if hh ne trunc( hh, 3 ) then _num_len_( 55 ) = max( _num_len_( 55 ), 4 ) ;
end ;
if iln_amt ne . then do ;
if iln_amt ne trunc( iln_amt, 7 ) then _num_len_( 56 ) = max( _num_len_( 56 ), 8 ) ;
else if iln_amt ne trunc( iln_amt, 6 ) then _num_len_( 56 ) = max( _num_len_( 56 ), 7 ) ;
else if iln_amt ne trunc( iln_amt, 5 ) then _num_len_( 56 ) = max( _num_len_( 56 ), 6 ) ;
else if iln_amt ne trunc( iln_amt, 4 ) then _num_len_( 56 ) = max( _num_len_( 56 ), 5 ) ;
else if iln_amt ne trunc( iln_amt, 3 ) then _num_len_( 56 ) = max( _num_len_( 56 ), 4 ) ;
end ;
if ins ne . then do ;
if ins ne trunc( ins, 7 ) then _num_len_( 57 ) = max( _num_len_( 57 ), 8 ) ;
else if ins ne trunc( ins, 6 ) then _num_len_( 57 ) = max( _num_len_( 57 ), 7 ) ;
else if ins ne trunc( ins, 5 ) then _num_len_( 57 ) = max( _num_len_( 57 ), 6 ) ;
else if ins ne trunc( ins, 4 ) then _num_len_( 57 ) = max( _num_len_( 57 ), 5 ) ;
else if ins ne trunc( ins, 3 ) then _num_len_( 57 ) = max( _num_len_( 57 ), 4 ) ;
end ;
if ira ne . then do ;
if ira ne trunc( ira, 7 ) then _num_len_( 58 ) = max( _num_len_( 58 ), 8 ) ;
else if ira ne trunc( ira, 6 ) then _num_len_( 58 ) = max( _num_len_( 58 ), 7 ) ;
else if ira ne trunc( ira, 5 ) then _num_len_( 58 ) = max( _num_len_( 58 ), 6 ) ;
else if ira ne trunc( ira, 4 ) then _num_len_( 58 ) = max( _num_len_( 58 ), 5 ) ;
else if ira ne trunc( ira, 3 ) then _num_len_( 58 ) = max( _num_len_( 58 ), 4 ) ;
end ;
if ixi_Bonds ne . then do ;
if ixi_Bonds ne trunc( ixi_Bonds, 7 ) then _num_len_( 59 ) = max( _num_len_( 59 ), 8 ) ;
else if ixi_Bonds ne trunc( ixi_Bonds, 6 ) then _num_len_( 59 ) = max( _num_len_( 59 ), 7 ) ;
else if ixi_Bonds ne trunc( ixi_Bonds, 5 ) then _num_len_( 59 ) = max( _num_len_( 59 ), 6 ) ;
else if ixi_Bonds ne trunc( ixi_Bonds, 4 ) then _num_len_( 59 ) = max( _num_len_( 59 ), 5 ) ;
else if ixi_Bonds ne trunc( ixi_Bonds, 3 ) then _num_len_( 59 ) = max( _num_len_( 59 ), 4 ) ;
end ;
if ixi_Funds ne . then do ;
if ixi_Funds ne trunc( ixi_Funds, 7 ) then _num_len_( 60 ) = max( _num_len_( 60 ), 8 ) ;
else if ixi_Funds ne trunc( ixi_Funds, 6 ) then _num_len_( 60 ) = max( _num_len_( 60 ), 7 ) ;
else if ixi_Funds ne trunc( ixi_Funds, 5 ) then _num_len_( 60 ) = max( _num_len_( 60 ), 6 ) ;
else if ixi_Funds ne trunc( ixi_Funds, 4 ) then _num_len_( 60 ) = max( _num_len_( 60 ), 5 ) ;
else if ixi_Funds ne trunc( ixi_Funds, 3 ) then _num_len_( 60 ) = max( _num_len_( 60 ), 4 ) ;
end ;
if ixi_MMS ne . then do ;
if ixi_MMS ne trunc( ixi_MMS, 7 ) then _num_len_( 61 ) = max( _num_len_( 61 ), 8 ) ;
else if ixi_MMS ne trunc( ixi_MMS, 6 ) then _num_len_( 61 ) = max( _num_len_( 61 ), 7 ) ;
else if ixi_MMS ne trunc( ixi_MMS, 5 ) then _num_len_( 61 ) = max( _num_len_( 61 ), 6 ) ;
else if ixi_MMS ne trunc( ixi_MMS, 4 ) then _num_len_( 61 ) = max( _num_len_( 61 ), 5 ) ;
else if ixi_MMS ne trunc( ixi_MMS, 3 ) then _num_len_( 61 ) = max( _num_len_( 61 ), 4 ) ;
end ;
if ixi_Non_Int_Chk ne . then do ;
if ixi_Non_Int_Chk ne trunc( ixi_Non_Int_Chk, 7 ) then _num_len_( 62 ) = max( _num_len_( 62 ), 8 ) ;
else if ixi_Non_Int_Chk ne trunc( ixi_Non_Int_Chk, 6 ) then _num_len_( 62 ) = max( _num_len_( 62 ), 7 ) ;
else if ixi_Non_Int_Chk ne trunc( ixi_Non_Int_Chk, 5 ) then _num_len_( 62 ) = max( _num_len_( 62 ), 6 ) ;
else if ixi_Non_Int_Chk ne trunc( ixi_Non_Int_Chk, 4 ) then _num_len_( 62 ) = max( _num_len_( 62 ), 5 ) ;
else if ixi_Non_Int_Chk ne trunc( ixi_Non_Int_Chk, 3 ) then _num_len_( 62 ) = max( _num_len_( 62 ), 4 ) ;
end ;
if ixi_Other ne . then do ;
if ixi_Other ne trunc( ixi_Other, 7 ) then _num_len_( 63 ) = max( _num_len_( 63 ), 8 ) ;
else if ixi_Other ne trunc( ixi_Other, 6 ) then _num_len_( 63 ) = max( _num_len_( 63 ), 7 ) ;
else if ixi_Other ne trunc( ixi_Other, 5 ) then _num_len_( 63 ) = max( _num_len_( 63 ), 6 ) ;
else if ixi_Other ne trunc( ixi_Other, 4 ) then _num_len_( 63 ) = max( _num_len_( 63 ), 5 ) ;
else if ixi_Other ne trunc( ixi_Other, 3 ) then _num_len_( 63 ) = max( _num_len_( 63 ), 4 ) ;
end ;
if ixi_Stocks ne . then do ;
if ixi_Stocks ne trunc( ixi_Stocks, 7 ) then _num_len_( 64 ) = max( _num_len_( 64 ), 8 ) ;
else if ixi_Stocks ne trunc( ixi_Stocks, 6 ) then _num_len_( 64 ) = max( _num_len_( 64 ), 7 ) ;
else if ixi_Stocks ne trunc( ixi_Stocks, 5 ) then _num_len_( 64 ) = max( _num_len_( 64 ), 6 ) ;
else if ixi_Stocks ne trunc( ixi_Stocks, 4 ) then _num_len_( 64 ) = max( _num_len_( 64 ), 5 ) ;
else if ixi_Stocks ne trunc( ixi_Stocks, 3 ) then _num_len_( 64 ) = max( _num_len_( 64 ), 4 ) ;
end ;
if ixi_int_chk ne . then do ;
if ixi_int_chk ne trunc( ixi_int_chk, 7 ) then _num_len_( 65 ) = max( _num_len_( 65 ), 8 ) ;
else if ixi_int_chk ne trunc( ixi_int_chk, 6 ) then _num_len_( 65 ) = max( _num_len_( 65 ), 7 ) ;
else if ixi_int_chk ne trunc( ixi_int_chk, 5 ) then _num_len_( 65 ) = max( _num_len_( 65 ), 6 ) ;
else if ixi_int_chk ne trunc( ixi_int_chk, 4 ) then _num_len_( 65 ) = max( _num_len_( 65 ), 5 ) ;
else if ixi_int_chk ne trunc( ixi_int_chk, 3 ) then _num_len_( 65 ) = max( _num_len_( 65 ), 4 ) ;
end ;
if ixi_savings ne . then do ;
if ixi_savings ne trunc( ixi_savings, 7 ) then _num_len_( 66 ) = max( _num_len_( 66 ), 8 ) ;
else if ixi_savings ne trunc( ixi_savings, 6 ) then _num_len_( 66 ) = max( _num_len_( 66 ), 7 ) ;
else if ixi_savings ne trunc( ixi_savings, 5 ) then _num_len_( 66 ) = max( _num_len_( 66 ), 6 ) ;
else if ixi_savings ne trunc( ixi_savings, 4 ) then _num_len_( 66 ) = max( _num_len_( 66 ), 5 ) ;
else if ixi_savings ne trunc( ixi_savings, 3 ) then _num_len_( 66 ) = max( _num_len_( 66 ), 4 ) ;
end ;
if ixi_tda ne . then do ;
if ixi_tda ne trunc( ixi_tda, 7 ) then _num_len_( 67 ) = max( _num_len_( 67 ), 8 ) ;
else if ixi_tda ne trunc( ixi_tda, 6 ) then _num_len_( 67 ) = max( _num_len_( 67 ), 7 ) ;
else if ixi_tda ne trunc( ixi_tda, 5 ) then _num_len_( 67 ) = max( _num_len_( 67 ), 6 ) ;
else if ixi_tda ne trunc( ixi_tda, 4 ) then _num_len_( 67 ) = max( _num_len_( 67 ), 5 ) ;
else if ixi_tda ne trunc( ixi_tda, 3 ) then _num_len_( 67 ) = max( _num_len_( 67 ), 4 ) ;
end ;
if mms ne . then do ;
if mms ne trunc( mms, 7 ) then _num_len_( 68 ) = max( _num_len_( 68 ), 8 ) ;
else if mms ne trunc( mms, 6 ) then _num_len_( 68 ) = max( _num_len_( 68 ), 7 ) ;
else if mms ne trunc( mms, 5 ) then _num_len_( 68 ) = max( _num_len_( 68 ), 6 ) ;
else if mms ne trunc( mms, 4 ) then _num_len_( 68 ) = max( _num_len_( 68 ), 5 ) ;
else if mms ne trunc( mms, 3 ) then _num_len_( 68 ) = max( _num_len_( 68 ), 4 ) ;
end ;
if mpos_amt ne . then do ;
if mpos_amt ne trunc( mpos_amt, 7 ) then _num_len_( 69 ) = max( _num_len_( 69 ), 8 ) ;
else if mpos_amt ne trunc( mpos_amt, 6 ) then _num_len_( 69 ) = max( _num_len_( 69 ), 7 ) ;
else if mpos_amt ne trunc( mpos_amt, 5 ) then _num_len_( 69 ) = max( _num_len_( 69 ), 6 ) ;
else if mpos_amt ne trunc( mpos_amt, 4 ) then _num_len_( 69 ) = max( _num_len_( 69 ), 5 ) ;
else if mpos_amt ne trunc( mpos_amt, 3 ) then _num_len_( 69 ) = max( _num_len_( 69 ), 4 ) ;
end ;
if mpos_num ne . then do ;
if mpos_num ne trunc( mpos_num, 7 ) then _num_len_( 70 ) = max( _num_len_( 70 ), 8 ) ;
else if mpos_num ne trunc( mpos_num, 6 ) then _num_len_( 70 ) = max( _num_len_( 70 ), 7 ) ;
else if mpos_num ne trunc( mpos_num, 5 ) then _num_len_( 70 ) = max( _num_len_( 70 ), 6 ) ;
else if mpos_num ne trunc( mpos_num, 4 ) then _num_len_( 70 ) = max( _num_len_( 70 ), 5 ) ;
else if mpos_num ne trunc( mpos_num, 3 ) then _num_len_( 70 ) = max( _num_len_( 70 ), 4 ) ;
end ;
if mtg ne . then do ;
if mtg ne trunc( mtg, 7 ) then _num_len_( 71 ) = max( _num_len_( 71 ), 8 ) ;
else if mtg ne trunc( mtg, 6 ) then _num_len_( 71 ) = max( _num_len_( 71 ), 7 ) ;
else if mtg ne trunc( mtg, 5 ) then _num_len_( 71 ) = max( _num_len_( 71 ), 6 ) ;
else if mtg ne trunc( mtg, 4 ) then _num_len_( 71 ) = max( _num_len_( 71 ), 5 ) ;
else if mtg ne trunc( mtg, 3 ) then _num_len_( 71 ) = max( _num_len_( 71 ), 4 ) ;
end ;
if sav ne . then do ;
if sav ne trunc( sav, 7 ) then _num_len_( 72 ) = max( _num_len_( 72 ), 8 ) ;
else if sav ne trunc( sav, 6 ) then _num_len_( 72 ) = max( _num_len_( 72 ), 7 ) ;
else if sav ne trunc( sav, 5 ) then _num_len_( 72 ) = max( _num_len_( 72 ), 6 ) ;
else if sav ne trunc( sav, 4 ) then _num_len_( 72 ) = max( _num_len_( 72 ), 5 ) ;
else if sav ne trunc( sav, 3 ) then _num_len_( 72 ) = max( _num_len_( 72 ), 4 ) ;
end ;
if sav_amt ne . then do ;
if sav_amt ne trunc( sav_amt, 7 ) then _num_len_( 73 ) = max( _num_len_( 73 ), 8 ) ;
else if sav_amt ne trunc( sav_amt, 6 ) then _num_len_( 73 ) = max( _num_len_( 73 ), 7 ) ;
else if sav_amt ne trunc( sav_amt, 5 ) then _num_len_( 73 ) = max( _num_len_( 73 ), 6 ) ;
else if sav_amt ne trunc( sav_amt, 4 ) then _num_len_( 73 ) = max( _num_len_( 73 ), 5 ) ;
else if sav_amt ne trunc( sav_amt, 3 ) then _num_len_( 73 ) = max( _num_len_( 73 ), 4 ) ;
end ;
if sdb ne . then do ;
if sdb ne trunc( sdb, 7 ) then _num_len_( 74 ) = max( _num_len_( 74 ), 8 ) ;
else if sdb ne trunc( sdb, 6 ) then _num_len_( 74 ) = max( _num_len_( 74 ), 7 ) ;
else if sdb ne trunc( sdb, 5 ) then _num_len_( 74 ) = max( _num_len_( 74 ), 6 ) ;
else if sdb ne trunc( sdb, 4 ) then _num_len_( 74 ) = max( _num_len_( 74 ), 5 ) ;
else if sdb ne trunc( sdb, 3 ) then _num_len_( 74 ) = max( _num_len_( 74 ), 4 ) ;
end ;
if sec ne . then do ;
if sec ne trunc( sec, 7 ) then _num_len_( 75 ) = max( _num_len_( 75 ), 8 ) ;
else if sec ne trunc( sec, 6 ) then _num_len_( 75 ) = max( _num_len_( 75 ), 7 ) ;
else if sec ne trunc( sec, 5 ) then _num_len_( 75 ) = max( _num_len_( 75 ), 6 ) ;
else if sec ne trunc( sec, 4 ) then _num_len_( 75 ) = max( _num_len_( 75 ), 5 ) ;
else if sec ne trunc( sec, 3 ) then _num_len_( 75 ) = max( _num_len_( 75 ), 4 ) ;
end ;
if sec_Amt ne . then do ;
if sec_Amt ne trunc( sec_Amt, 7 ) then _num_len_( 76 ) = max( _num_len_( 76 ), 8 ) ;
else if sec_Amt ne trunc( sec_Amt, 6 ) then _num_len_( 76 ) = max( _num_len_( 76 ), 7 ) ;
else if sec_Amt ne trunc( sec_Amt, 5 ) then _num_len_( 76 ) = max( _num_len_( 76 ), 6 ) ;
else if sec_Amt ne trunc( sec_Amt, 4 ) then _num_len_( 76 ) = max( _num_len_( 76 ), 5 ) ;
else if sec_Amt ne trunc( sec_Amt, 3 ) then _num_len_( 76 ) = max( _num_len_( 76 ), 4 ) ;
end ;
if segment ne . then do ;
if segment ne trunc( segment, 7 ) then _num_len_( 77 ) = max( _num_len_( 77 ), 8 ) ;
else if segment ne trunc( segment, 6 ) then _num_len_( 77 ) = max( _num_len_( 77 ), 7 ) ;
else if segment ne trunc( segment, 5 ) then _num_len_( 77 ) = max( _num_len_( 77 ), 6 ) ;
else if segment ne trunc( segment, 4 ) then _num_len_( 77 ) = max( _num_len_( 77 ), 5 ) ;
else if segment ne trunc( segment, 3 ) then _num_len_( 77 ) = max( _num_len_( 77 ), 4 ) ;
end ;
if sln ne . then do ;
if sln ne trunc( sln, 7 ) then _num_len_( 78 ) = max( _num_len_( 78 ), 8 ) ;
else if sln ne trunc( sln, 6 ) then _num_len_( 78 ) = max( _num_len_( 78 ), 7 ) ;
else if sln ne trunc( sln, 5 ) then _num_len_( 78 ) = max( _num_len_( 78 ), 6 ) ;
else if sln ne trunc( sln, 4 ) then _num_len_( 78 ) = max( _num_len_( 78 ), 5 ) ;
else if sln ne trunc( sln, 3 ) then _num_len_( 78 ) = max( _num_len_( 78 ), 4 ) ;
end ;
if sln_amt ne . then do ;
if sln_amt ne trunc( sln_amt, 7 ) then _num_len_( 79 ) = max( _num_len_( 79 ), 8 ) ;
else if sln_amt ne trunc( sln_amt, 6 ) then _num_len_( 79 ) = max( _num_len_( 79 ), 7 ) ;
else if sln_amt ne trunc( sln_amt, 5 ) then _num_len_( 79 ) = max( _num_len_( 79 ), 6 ) ;
else if sln_amt ne trunc( sln_amt, 4 ) then _num_len_( 79 ) = max( _num_len_( 79 ), 5 ) ;
else if sln_amt ne trunc( sln_amt, 3 ) then _num_len_( 79 ) = max( _num_len_( 79 ), 4 ) ;
end ;
if tda ne . then do ;
if tda ne trunc( tda, 7 ) then _num_len_( 80 ) = max( _num_len_( 80 ), 8 ) ;
else if tda ne trunc( tda, 6 ) then _num_len_( 80 ) = max( _num_len_( 80 ), 7 ) ;
else if tda ne trunc( tda, 5 ) then _num_len_( 80 ) = max( _num_len_( 80 ), 6 ) ;
else if tda ne trunc( tda, 4 ) then _num_len_( 80 ) = max( _num_len_( 80 ), 5 ) ;
else if tda ne trunc( tda, 3 ) then _num_len_( 80 ) = max( _num_len_( 80 ), 4 ) ;
end ;
if tenure ne . then do ;
if tenure ne trunc( tenure, 7 ) then _num_len_( 81 ) = max( _num_len_( 81 ), 8 ) ;
else if tenure ne trunc( tenure, 6 ) then _num_len_( 81 ) = max( _num_len_( 81 ), 7 ) ;
else if tenure ne trunc( tenure, 5 ) then _num_len_( 81 ) = max( _num_len_( 81 ), 6 ) ;
else if tenure ne trunc( tenure, 4 ) then _num_len_( 81 ) = max( _num_len_( 81 ), 5 ) ;
else if tenure ne trunc( tenure, 3 ) then _num_len_( 81 ) = max( _num_len_( 81 ), 4 ) ;
end ;
if tenure_yr ne . then do ;
if tenure_yr ne trunc( tenure_yr, 7 ) then _num_len_( 82 ) = max( _num_len_( 82 ), 8 ) ;
else if tenure_yr ne trunc( tenure_yr, 6 ) then _num_len_( 82 ) = max( _num_len_( 82 ), 7 ) ;
else if tenure_yr ne trunc( tenure_yr, 5 ) then _num_len_( 82 ) = max( _num_len_( 82 ), 6 ) ;
else if tenure_yr ne trunc( tenure_yr, 4 ) then _num_len_( 82 ) = max( _num_len_( 82 ), 5 ) ;
else if tenure_yr ne trunc( tenure_yr, 3 ) then _num_len_( 82 ) = max( _num_len_( 82 ), 4 ) ;
end ;
if trs ne . then do ;
if trs ne trunc( trs, 7 ) then _num_len_( 83 ) = max( _num_len_( 83 ), 8 ) ;
else if trs ne trunc( trs, 6 ) then _num_len_( 83 ) = max( _num_len_( 83 ), 7 ) ;
else if trs ne trunc( trs, 5 ) then _num_len_( 83 ) = max( _num_len_( 83 ), 6 ) ;
else if trs ne trunc( trs, 4 ) then _num_len_( 83 ) = max( _num_len_( 83 ), 5 ) ;
else if trs ne trunc( trs, 3 ) then _num_len_( 83 ) = max( _num_len_( 83 ), 4 ) ;
end ;
if trs_amt ne . then do ;
if trs_amt ne trunc( trs_amt, 7 ) then _num_len_( 84 ) = max( _num_len_( 84 ), 8 ) ;
else if trs_amt ne trunc( trs_amt, 6 ) then _num_len_( 84 ) = max( _num_len_( 84 ), 7 ) ;
else if trs_amt ne trunc( trs_amt, 5 ) then _num_len_( 84 ) = max( _num_len_( 84 ), 6 ) ;
else if trs_amt ne trunc( trs_amt, 4 ) then _num_len_( 84 ) = max( _num_len_( 84 ), 5 ) ;
else if trs_amt ne trunc( trs_amt, 3 ) then _num_len_( 84 ) = max( _num_len_( 84 ), 4 ) ;
end ;
if vpos_num ne . then do ;
if vpos_num ne trunc( vpos_num, 7 ) then _num_len_( 85 ) = max( _num_len_( 85 ), 8 ) ;
else if vpos_num ne trunc( vpos_num, 6 ) then _num_len_( 85 ) = max( _num_len_( 85 ), 7 ) ;
else if vpos_num ne trunc( vpos_num, 5 ) then _num_len_( 85 ) = max( _num_len_( 85 ), 6 ) ;
else if vpos_num ne trunc( vpos_num, 4 ) then _num_len_( 85 ) = max( _num_len_( 85 ), 5 ) ;
else if vpos_num ne trunc( vpos_num, 3 ) then _num_len_( 85 ) = max( _num_len_( 85 ), 4 ) ;
end ;
if web ne . then do ;
if web ne trunc( web, 7 ) then _num_len_( 86 ) = max( _num_len_( 86 ), 8 ) ;
else if web ne trunc( web, 6 ) then _num_len_( 86 ) = max( _num_len_( 86 ), 7 ) ;
else if web ne trunc( web, 5 ) then _num_len_( 86 ) = max( _num_len_( 86 ), 6 ) ;
else if web ne trunc( web, 4 ) then _num_len_( 86 ) = max( _num_len_( 86 ), 5 ) ;
else if web ne trunc( web, 3 ) then _num_len_( 86 ) = max( _num_len_( 86 ), 4 ) ;
end ;
if web_signon ne . then do ;
if web_signon ne trunc( web_signon, 7 ) then _num_len_( 87 ) = max( _num_len_( 87 ), 8 ) ;
else if web_signon ne trunc( web_signon, 6 ) then _num_len_( 87 ) = max( _num_len_( 87 ), 7 ) ;
else if web_signon ne trunc( web_signon, 5 ) then _num_len_( 87 ) = max( _num_len_( 87 ), 6 ) ;
else if web_signon ne trunc( web_signon, 4 ) then _num_len_( 87 ) = max( _num_len_( 87 ), 5 ) ;
else if web_signon ne trunc( web_signon, 3 ) then _num_len_( 87 ) = max( _num_len_( 87 ), 4 ) ;
end ;
if lastobs then do ;
call symput( "CHARLEN1", put( _char_len_( 1 ), 5. )) ;
call symput( "CHARLEN2", put( _char_len_( 2 ), 5. )) ;
call symput( "CHARLEN3", put( _char_len_( 3 ), 5. )) ;
call symput( "CHARLEN4", put( _char_len_( 4 ), 5. )) ;
call symput( "CHARLEN5", put( _char_len_( 5 ), 5. )) ;
call symput( "CHARLEN6", put( _char_len_( 6 ), 5. )) ;
call symput( "CHARLEN7", put( _char_len_( 7 ), 5. )) ;
call symput( "CHARLEN8", put( _char_len_( 8 ), 5. )) ;
call symput( "CHARLEN9", put( _char_len_( 9 ), 5. )) ;
call symput( "NUMLEN1", put( _num_len_( 1 ), 1. )) ;
call symput( "NUMLEN2", put( _num_len_( 2 ), 1. )) ;
call symput( "NUMLEN3", put( _num_len_( 3 ), 1. )) ;
call symput( "NUMLEN4", put( _num_len_( 4 ), 1. )) ;
call symput( "NUMLEN5", put( _num_len_( 5 ), 1. )) ;
call symput( "NUMLEN6", put( _num_len_( 6 ), 1. )) ;
call symput( "NUMLEN7", put( _num_len_( 7 ), 1. )) ;
call symput( "NUMLEN8", put( _num_len_( 8 ), 1. )) ;
call symput( "NUMLEN9", put( _num_len_( 9 ), 1. )) ;
call symput( "NUMLEN10", put( _num_len_( 10 ), 1. )) ;
call symput( "NUMLEN11", put( _num_len_( 11 ), 1. )) ;
call symput( "NUMLEN12", put( _num_len_( 12 ), 1. )) ;
call symput( "NUMLEN13", put( _num_len_( 13 ), 1. )) ;
call symput( "NUMLEN14", put( _num_len_( 14 ), 1. )) ;
call symput( "NUMLEN15", put( _num_len_( 15 ), 1. )) ;
call symput( "NUMLEN16", put( _num_len_( 16 ), 1. )) ;
call symput( "NUMLEN17", put( _num_len_( 17 ), 1. )) ;
call symput( "NUMLEN18", put( _num_len_( 18 ), 1. )) ;
call symput( "NUMLEN19", put( _num_len_( 19 ), 1. )) ;
call symput( "NUMLEN20", put( _num_len_( 20 ), 1. )) ;
call symput( "NUMLEN21", put( _num_len_( 21 ), 1. )) ;
call symput( "NUMLEN22", put( _num_len_( 22 ), 1. )) ;
call symput( "NUMLEN23", put( _num_len_( 23 ), 1. )) ;
call symput( "NUMLEN24", put( _num_len_( 24 ), 1. )) ;
call symput( "NUMLEN25", put( _num_len_( 25 ), 1. )) ;
call symput( "NUMLEN26", put( _num_len_( 26 ), 1. )) ;
call symput( "NUMLEN27", put( _num_len_( 27 ), 1. )) ;
call symput( "NUMLEN28", put( _num_len_( 28 ), 1. )) ;
call symput( "NUMLEN29", put( _num_len_( 29 ), 1. )) ;
call symput( "NUMLEN30", put( _num_len_( 30 ), 1. )) ;
call symput( "NUMLEN31", put( _num_len_( 31 ), 1. )) ;
call symput( "NUMLEN32", put( _num_len_( 32 ), 1. )) ;
call symput( "NUMLEN33", put( _num_len_( 33 ), 1. )) ;
call symput( "NUMLEN34", put( _num_len_( 34 ), 1. )) ;
call symput( "NUMLEN35", put( _num_len_( 35 ), 1. )) ;
call symput( "NUMLEN36", put( _num_len_( 36 ), 1. )) ;
call symput( "NUMLEN37", put( _num_len_( 37 ), 1. )) ;
call symput( "NUMLEN38", put( _num_len_( 38 ), 1. )) ;
call symput( "NUMLEN39", put( _num_len_( 39 ), 1. )) ;
call symput( "NUMLEN40", put( _num_len_( 40 ), 1. )) ;
call symput( "NUMLEN41", put( _num_len_( 41 ), 1. )) ;
call symput( "NUMLEN42", put( _num_len_( 42 ), 1. )) ;
call symput( "NUMLEN43", put( _num_len_( 43 ), 1. )) ;
call symput( "NUMLEN44", put( _num_len_( 44 ), 1. )) ;
call symput( "NUMLEN45", put( _num_len_( 45 ), 1. )) ;
call symput( "NUMLEN46", put( _num_len_( 46 ), 1. )) ;
call symput( "NUMLEN47", put( _num_len_( 47 ), 1. )) ;
call symput( "NUMLEN48", put( _num_len_( 48 ), 1. )) ;
call symput( "NUMLEN49", put( _num_len_( 49 ), 1. )) ;
call symput( "NUMLEN50", put( _num_len_( 50 ), 1. )) ;
call symput( "NUMLEN51", put( _num_len_( 51 ), 1. )) ;
call symput( "NUMLEN52", put( _num_len_( 52 ), 1. )) ;
call symput( "NUMLEN53", put( _num_len_( 53 ), 1. )) ;
call symput( "NUMLEN54", put( _num_len_( 54 ), 1. )) ;
call symput( "NUMLEN55", put( _num_len_( 55 ), 1. )) ;
call symput( "NUMLEN56", put( _num_len_( 56 ), 1. )) ;
call symput( "NUMLEN57", put( _num_len_( 57 ), 1. )) ;
call symput( "NUMLEN58", put( _num_len_( 58 ), 1. )) ;
call symput( "NUMLEN59", put( _num_len_( 59 ), 1. )) ;
call symput( "NUMLEN60", put( _num_len_( 60 ), 1. )) ;
call symput( "NUMLEN61", put( _num_len_( 61 ), 1. )) ;
call symput( "NUMLEN62", put( _num_len_( 62 ), 1. )) ;
call symput( "NUMLEN63", put( _num_len_( 63 ), 1. )) ;
call symput( "NUMLEN64", put( _num_len_( 64 ), 1. )) ;
call symput( "NUMLEN65", put( _num_len_( 65 ), 1. )) ;
call symput( "NUMLEN66", put( _num_len_( 66 ), 1. )) ;
call symput( "NUMLEN67", put( _num_len_( 67 ), 1. )) ;
call symput( "NUMLEN68", put( _num_len_( 68 ), 1. )) ;
call symput( "NUMLEN69", put( _num_len_( 69 ), 1. )) ;
call symput( "NUMLEN70", put( _num_len_( 70 ), 1. )) ;
call symput( "NUMLEN71", put( _num_len_( 71 ), 1. )) ;
call symput( "NUMLEN72", put( _num_len_( 72 ), 1. )) ;
call symput( "NUMLEN73", put( _num_len_( 73 ), 1. )) ;
call symput( "NUMLEN74", put( _num_len_( 74 ), 1. )) ;
call symput( "NUMLEN75", put( _num_len_( 75 ), 1. )) ;
call symput( "NUMLEN76", put( _num_len_( 76 ), 1. )) ;
call symput( "NUMLEN77", put( _num_len_( 77 ), 1. )) ;
call symput( "NUMLEN78", put( _num_len_( 78 ), 1. )) ;
call symput( "NUMLEN79", put( _num_len_( 79 ), 1. )) ;
call symput( "NUMLEN80", put( _num_len_( 80 ), 1. )) ;
call symput( "NUMLEN81", put( _num_len_( 81 ), 1. )) ;
call symput( "NUMLEN82", put( _num_len_( 82 ), 1. )) ;
call symput( "NUMLEN83", put( _num_len_( 83 ), 1. )) ;
call symput( "NUMLEN84", put( _num_len_( 84 ), 1. )) ;
call symput( "NUMLEN85", put( _num_len_( 85 ), 1. )) ;
call symput( "NUMLEN86", put( _num_len_( 86 ), 1. )) ;
call symput( "NUMLEN87", put( _num_len_( 87 ), 1. )) ;
end ;
run ;
proc datasets nolist ;
delete _cntnts_ ;
run ;
data _null_ ;
length retain $32767 ;
retain retain 'retain ' ;
dsid = open( "data.main_201209", 'I' ) ;
do _i_ = 1 to attrn( dsid, 'nvars' ) ;
retain = trim( retain ) || ' ' || varname( dsid, _i_ ) ;
end ;
call symput( 'RETAIN', retain ) ;
run ;
data data.main_201209_new ;
retain HHID STATE ZIP RM BRANCH CBR MARKET dda mms sav tda ira sec trs mtg heq card ILN sln sdb ins bus com DDA_Amt MMS_amt sav_amt TDA_Amt IRA_amt sec_Amt trs_amt MTG_amt HEQ_Amt ccs_Amt iln_amt sln_amt IXI_tot IXi_Annuity ixi_Bonds ixi_Funds ixi_Stocks
ixi_Other ixi_Non_Int_Chk ixi_int_chk ixi_savings ixi_MMS ixi_tda source WAS WFO segment clv_total clv_rem clv_rem_ten cqi_bp cqi_DD cqi_deb cqi_odl cqi_web web VPOS_AMT vpos_num mpos_amt mpos_num ATMO_AMT ATMO_NUM ATMT_AMT ATMT_NUM web_signon BP_NUM
BP_AMT BR_TR_NUM BR_TR_amt VRU_NUM SMS_NUM WAP_NUM fico_num bp WAP SMS edeliv estat fico FWorks fworks_num band band_yr IND IND_AMT chk_num dd_amt distance tenure tran_code tenure_yr hh grp ;
LENGTH BRANCH $5 HHID $9 RM $1 STATE $2 ZIP $5 band $1 band_yr $1 source $7 tran_code $1 ;
LENGTH ATMO_AMT 8 ATMO_NUM 3 ATMT_AMT 8 ATMT_NUM 3 BP_AMT 8 BP_NUM 3 BR_TR_NUM 3 BR_TR_amt 8 CBR 3 DDA_Amt 8 FWorks 3 HEQ_Amt 8 ILN 3 IND 3 IND_AMT 8 IRA_amt 8 IXI_tot 5 IXi_Annuity 5 MARKET 3 MMS_amt 8 MTG_amt 8 SMS 3 SMS_NUM 3 TDA_Amt 8 VPOS_AMT 8
VRU_NUM 3 WAP 3 WAP_NUM 4 WAS 3 WFO 3 bp 3 bus 3 card 3 ccs_Amt 8 chk_num 3 clv_rem 8 clv_rem_ten 3 clv_total 8 com 3 cqi_DD 3 cqi_bp 3 cqi_deb 3 cqi_odl 3 cqi_web 3 dd_amt 8 dda 3 distance 8 edeliv 3 estat 3 fico 3 fico_num 3 fworks_num 3 grp 3 heq 3 hh
3 iln_amt 8 ins 3 ira 3 ixi_Bonds 5 ixi_Funds 5 ixi_MMS 5 ixi_Non_Int_Chk 5 ixi_Other 5 ixi_Stocks 5 ixi_int_chk 5 ixi_savings 5 ixi_tda 5 mms 3 mpos_amt 8 mpos_num 3 mtg 3 sav 3 sav_amt 8 sdb 3 sec 3 sec_Amt 8 segment 3 sln 3 sln_amt 8 tda 3 tenure 4
tenure_yr 8 trs 3 trs_amt 6 vpos_num 3 web 3 web_signon 3 ;
FORMAT BRANCH $5. HHID $9. RM $1. STATE $2. ZIP $5. band $1. band_yr $1. source $7. tran_code $1. ;
set data.main_201209 ;
run ;
proc contents data=data.contrib_201209( drop= ) memtype=data noprint out=_cntnts_( keep= name type ) ;
run ;
data _null_ ;
set _cntnts_ end=lastobs nobs=nobs ;
if nobs = 0 then stop ;
n_char + ( type = 2 ) ;
n_num + ( type = 1 ) ;
if lastobs then do ;
call symput( 'N_CHAR', left( put( n_char, 5. ))) ;
call symput( 'N_NUM' , left( put( n_num , 5. ))) ;
end ;
run ;
proc sql noprint ;
select name into :CHAR1 - :CHAR6 from _cntnts_ where type = 2 ;
select name into :NUM1 - :NUM15 from _cntnts_ where type = 1 ;
quit ;
data _null_ ;
set data.contrib_201209 end=lastobs ;
array _num_len_ ( 15 ) 3 _temporary_ ;
array _char_len_ ( 6 ) _temporary_ ;
if _n_ = 1 then do ;
do i = 1 to 6 ;
_char_len_( i ) = 0 ;
end ;
do i = 1 to 15 ;
_num_len_ ( i ) = 3 ;
end ;
end ;
_char_len_( 1 ) = max( _char_len_( 1 ), length( BRANCH )) ;
_char_len_( 2 ) = max( _char_len_( 2 ), length( HHID )) ;
_char_len_( 3 ) = max( _char_len_( 3 ), length( STATE )) ;
_char_len_( 4 ) = max( _char_len_( 4 ), length( ZIP )) ;
_char_len_( 5 ) = max( _char_len_( 5 ), length( band )) ;
_char_len_( 6 ) = max( _char_len_( 6 ), length( band_yr )) ;
if CBR ne . then do ;
if CBR ne trunc( CBR, 7 ) then _num_len_( 1 ) = max( _num_len_( 1 ), 8 ) ;
else if CBR ne trunc( CBR, 6 ) then _num_len_( 1 ) = max( _num_len_( 1 ), 7 ) ;
else if CBR ne trunc( CBR, 5 ) then _num_len_( 1 ) = max( _num_len_( 1 ), 6 ) ;
else if CBR ne trunc( CBR, 4 ) then _num_len_( 1 ) = max( _num_len_( 1 ), 5 ) ;
else if CBR ne trunc( CBR, 3 ) then _num_len_( 1 ) = max( _num_len_( 1 ), 4 ) ;
end ;
if DDA_CON ne . then do ;
if DDA_CON ne trunc( DDA_CON, 7 ) then _num_len_( 2 ) = max( _num_len_( 2 ), 8 ) ;
else if DDA_CON ne trunc( DDA_CON, 6 ) then _num_len_( 2 ) = max( _num_len_( 2 ), 7 ) ;
else if DDA_CON ne trunc( DDA_CON, 5 ) then _num_len_( 2 ) = max( _num_len_( 2 ), 6 ) ;
else if DDA_CON ne trunc( DDA_CON, 4 ) then _num_len_( 2 ) = max( _num_len_( 2 ), 5 ) ;
else if DDA_CON ne trunc( DDA_CON, 3 ) then _num_len_( 2 ) = max( _num_len_( 2 ), 4 ) ;
end ;
if ILN_CON ne . then do ;
if ILN_CON ne trunc( ILN_CON, 7 ) then _num_len_( 3 ) = max( _num_len_( 3 ), 8 ) ;
else if ILN_CON ne trunc( ILN_CON, 6 ) then _num_len_( 3 ) = max( _num_len_( 3 ), 7 ) ;
else if ILN_CON ne trunc( ILN_CON, 5 ) then _num_len_( 3 ) = max( _num_len_( 3 ), 6 ) ;
else if ILN_CON ne trunc( ILN_CON, 4 ) then _num_len_( 3 ) = max( _num_len_( 3 ), 5 ) ;
else if ILN_CON ne trunc( ILN_CON, 3 ) then _num_len_( 3 ) = max( _num_len_( 3 ), 4 ) ;
end ;
if IND_con ne . then do ;
if IND_con ne trunc( IND_con, 7 ) then _num_len_( 4 ) = max( _num_len_( 4 ), 8 ) ;
else if IND_con ne trunc( IND_con, 6 ) then _num_len_( 4 ) = max( _num_len_( 4 ), 7 ) ;
else if IND_con ne trunc( IND_con, 5 ) then _num_len_( 4 ) = max( _num_len_( 4 ), 6 ) ;
else if IND_con ne trunc( IND_con, 4 ) then _num_len_( 4 ) = max( _num_len_( 4 ), 5 ) ;
else if IND_con ne trunc( IND_con, 3 ) then _num_len_( 4 ) = max( _num_len_( 4 ), 4 ) ;
end ;
if IRA_CON ne . then do ;
if IRA_CON ne trunc( IRA_CON, 7 ) then _num_len_( 5 ) = max( _num_len_( 5 ), 8 ) ;
else if IRA_CON ne trunc( IRA_CON, 6 ) then _num_len_( 5 ) = max( _num_len_( 5 ), 7 ) ;
else if IRA_CON ne trunc( IRA_CON, 5 ) then _num_len_( 5 ) = max( _num_len_( 5 ), 6 ) ;
else if IRA_CON ne trunc( IRA_CON, 4 ) then _num_len_( 5 ) = max( _num_len_( 5 ), 5 ) ;
else if IRA_CON ne trunc( IRA_CON, 3 ) then _num_len_( 5 ) = max( _num_len_( 5 ), 4 ) ;
end ;
if MARKET ne . then do ;
if MARKET ne trunc( MARKET, 7 ) then _num_len_( 6 ) = max( _num_len_( 6 ), 8 ) ;
else if MARKET ne trunc( MARKET, 6 ) then _num_len_( 6 ) = max( _num_len_( 6 ), 7 ) ;
else if MARKET ne trunc( MARKET, 5 ) then _num_len_( 6 ) = max( _num_len_( 6 ), 6 ) ;
else if MARKET ne trunc( MARKET, 4 ) then _num_len_( 6 ) = max( _num_len_( 6 ), 5 ) ;
else if MARKET ne trunc( MARKET, 3 ) then _num_len_( 6 ) = max( _num_len_( 6 ), 4 ) ;
end ;
if MMS_CON ne . then do ;
if MMS_CON ne trunc( MMS_CON, 7 ) then _num_len_( 7 ) = max( _num_len_( 7 ), 8 ) ;
else if MMS_CON ne trunc( MMS_CON, 6 ) then _num_len_( 7 ) = max( _num_len_( 7 ), 7 ) ;
else if MMS_CON ne trunc( MMS_CON, 5 ) then _num_len_( 7 ) = max( _num_len_( 7 ), 6 ) ;
else if MMS_CON ne trunc( MMS_CON, 4 ) then _num_len_( 7 ) = max( _num_len_( 7 ), 5 ) ;
else if MMS_CON ne trunc( MMS_CON, 3 ) then _num_len_( 7 ) = max( _num_len_( 7 ), 4 ) ;
end ;
if SAV_CON ne . then do ;
if SAV_CON ne trunc( SAV_CON, 7 ) then _num_len_( 8 ) = max( _num_len_( 8 ), 8 ) ;
else if SAV_CON ne trunc( SAV_CON, 6 ) then _num_len_( 8 ) = max( _num_len_( 8 ), 7 ) ;
else if SAV_CON ne trunc( SAV_CON, 5 ) then _num_len_( 8 ) = max( _num_len_( 8 ), 6 ) ;
else if SAV_CON ne trunc( SAV_CON, 4 ) then _num_len_( 8 ) = max( _num_len_( 8 ), 5 ) ;
else if SAV_CON ne trunc( SAV_CON, 3 ) then _num_len_( 8 ) = max( _num_len_( 8 ), 4 ) ;
end ;
if SEC_CON ne . then do ;
if SEC_CON ne trunc( SEC_CON, 7 ) then _num_len_( 9 ) = max( _num_len_( 9 ), 8 ) ;
else if SEC_CON ne trunc( SEC_CON, 6 ) then _num_len_( 9 ) = max( _num_len_( 9 ), 7 ) ;
else if SEC_CON ne trunc( SEC_CON, 5 ) then _num_len_( 9 ) = max( _num_len_( 9 ), 6 ) ;
else if SEC_CON ne trunc( SEC_CON, 4 ) then _num_len_( 9 ) = max( _num_len_( 9 ), 5 ) ;
else if SEC_CON ne trunc( SEC_CON, 3 ) then _num_len_( 9 ) = max( _num_len_( 9 ), 4 ) ;
end ;
if SLN_CON ne . then do ;
if SLN_CON ne trunc( SLN_CON, 7 ) then _num_len_( 10 ) = max( _num_len_( 10 ), 8 ) ;
else if SLN_CON ne trunc( SLN_CON, 6 ) then _num_len_( 10 ) = max( _num_len_( 10 ), 7 ) ;
else if SLN_CON ne trunc( SLN_CON, 5 ) then _num_len_( 10 ) = max( _num_len_( 10 ), 6 ) ;
else if SLN_CON ne trunc( SLN_CON, 4 ) then _num_len_( 10 ) = max( _num_len_( 10 ), 5 ) ;
else if SLN_CON ne trunc( SLN_CON, 3 ) then _num_len_( 10 ) = max( _num_len_( 10 ), 4 ) ;
end ;
if TDA_CON ne . then do ;
if TDA_CON ne trunc( TDA_CON, 7 ) then _num_len_( 11 ) = max( _num_len_( 11 ), 8 ) ;
else if TDA_CON ne trunc( TDA_CON, 6 ) then _num_len_( 11 ) = max( _num_len_( 11 ), 7 ) ;
else if TDA_CON ne trunc( TDA_CON, 5 ) then _num_len_( 11 ) = max( _num_len_( 11 ), 6 ) ;
else if TDA_CON ne trunc( TDA_CON, 4 ) then _num_len_( 11 ) = max( _num_len_( 11 ), 5 ) ;
else if TDA_CON ne trunc( TDA_CON, 3 ) then _num_len_( 11 ) = max( _num_len_( 11 ), 4 ) ;
end ;
if TRS_CON ne . then do ;
if TRS_CON ne trunc( TRS_CON, 7 ) then _num_len_( 12 ) = max( _num_len_( 12 ), 8 ) ;
else if TRS_CON ne trunc( TRS_CON, 6 ) then _num_len_( 12 ) = max( _num_len_( 12 ), 7 ) ;
else if TRS_CON ne trunc( TRS_CON, 5 ) then _num_len_( 12 ) = max( _num_len_( 12 ), 6 ) ;
else if TRS_CON ne trunc( TRS_CON, 4 ) then _num_len_( 12 ) = max( _num_len_( 12 ), 5 ) ;
else if TRS_CON ne trunc( TRS_CON, 3 ) then _num_len_( 12 ) = max( _num_len_( 12 ), 4 ) ;
end ;
if card_con ne . then do ;
if card_con ne trunc( card_con, 7 ) then _num_len_( 13 ) = max( _num_len_( 13 ), 8 ) ;
else if card_con ne trunc( card_con, 6 ) then _num_len_( 13 ) = max( _num_len_( 13 ), 7 ) ;
else if card_con ne trunc( card_con, 5 ) then _num_len_( 13 ) = max( _num_len_( 13 ), 6 ) ;
else if card_con ne trunc( card_con, 4 ) then _num_len_( 13 ) = max( _num_len_( 13 ), 5 ) ;
else if card_con ne trunc( card_con, 3 ) then _num_len_( 13 ) = max( _num_len_( 13 ), 4 ) ;
end ;
if heq_con ne . then do ;
if heq_con ne trunc( heq_con, 7 ) then _num_len_( 14 ) = max( _num_len_( 14 ), 8 ) ;
else if heq_con ne trunc( heq_con, 6 ) then _num_len_( 14 ) = max( _num_len_( 14 ), 7 ) ;
else if heq_con ne trunc( heq_con, 5 ) then _num_len_( 14 ) = max( _num_len_( 14 ), 6 ) ;
else if heq_con ne trunc( heq_con, 4 ) then _num_len_( 14 ) = max( _num_len_( 14 ), 5 ) ;
else if heq_con ne trunc( heq_con, 3 ) then _num_len_( 14 ) = max( _num_len_( 14 ), 4 ) ;
end ;
if mtg_con ne . then do ;
if mtg_con ne trunc( mtg_con, 7 ) then _num_len_( 15 ) = max( _num_len_( 15 ), 8 ) ;
else if mtg_con ne trunc( mtg_con, 6 ) then _num_len_( 15 ) = max( _num_len_( 15 ), 7 ) ;
else if mtg_con ne trunc( mtg_con, 5 ) then _num_len_( 15 ) = max( _num_len_( 15 ), 6 ) ;
else if mtg_con ne trunc( mtg_con, 4 ) then _num_len_( 15 ) = max( _num_len_( 15 ), 5 ) ;
else if mtg_con ne trunc( mtg_con, 3 ) then _num_len_( 15 ) = max( _num_len_( 15 ), 4 ) ;
end ;
if lastobs then do ;
call symput( "CHARLEN1", put( _char_len_( 1 ), 5. )) ;
call symput( "CHARLEN2", put( _char_len_( 2 ), 5. )) ;
call symput( "CHARLEN3", put( _char_len_( 3 ), 5. )) ;
call symput( "CHARLEN4", put( _char_len_( 4 ), 5. )) ;
call symput( "CHARLEN5", put( _char_len_( 5 ), 5. )) ;
call symput( "CHARLEN6", put( _char_len_( 6 ), 5. )) ;
call symput( "NUMLEN1", put( _num_len_( 1 ), 1. )) ;
call symput( "NUMLEN2", put( _num_len_( 2 ), 1. )) ;
call symput( "NUMLEN3", put( _num_len_( 3 ), 1. )) ;
call symput( "NUMLEN4", put( _num_len_( 4 ), 1. )) ;
call symput( "NUMLEN5", put( _num_len_( 5 ), 1. )) ;
call symput( "NUMLEN6", put( _num_len_( 6 ), 1. )) ;
call symput( "NUMLEN7", put( _num_len_( 7 ), 1. )) ;
call symput( "NUMLEN8", put( _num_len_( 8 ), 1. )) ;
call symput( "NUMLEN9", put( _num_len_( 9 ), 1. )) ;
call symput( "NUMLEN10", put( _num_len_( 10 ), 1. )) ;
call symput( "NUMLEN11", put( _num_len_( 11 ), 1. )) ;
call symput( "NUMLEN12", put( _num_len_( 12 ), 1. )) ;
call symput( "NUMLEN13", put( _num_len_( 13 ), 1. )) ;
call symput( "NUMLEN14", put( _num_len_( 14 ), 1. )) ;
call symput( "NUMLEN15", put( _num_len_( 15 ), 1. )) ;
end ;
run ;
proc datasets nolist ;
delete _cntnts_ ;
run ;
data _null_ ;
length retain $32767 ;
retain retain 'retain ' ;
dsid = open( "data.contrib_201209", 'I' ) ;
do _i_ = 1 to attrn( dsid, 'nvars' ) ;
retain = trim( retain ) || ' ' || varname( dsid, _i_ ) ;
end ;
call symput( 'RETAIN', retain ) ;
run ;
data data.contrib_201209_new ;
retain HHID STATE ZIP BRANCH CBR MARKET DDA_CON MMS_CON SAV_CON TDA_CON IRA_CON SEC_CON TRS_CON mtg_con heq_con card_con ILN_CON SLN_CON band band_yr IND_con ;
LENGTH BRANCH $5 HHID $9 STATE $2 ZIP $5 band $1 band_yr $1 ;
LENGTH CBR 3 DDA_CON 8 ILN_CON 8 IND_con 8 IRA_CON 8 MARKET 3 MMS_CON 8 SAV_CON 8 SEC_CON 8 SLN_CON 8 TDA_CON 8 TRS_CON 8 card_con 8 heq_con 8 mtg_con 8 ;
FORMAT BRANCH $5. HHID $9. STATE $2. ZIP $5. band $1. band_yr $1. ;
set data.contrib_201209 ;
run ;
options compress=yes;
proc datasets;
delete data.contrib_201209;
rename data.contrib_201209_new=data.contrib_201209 delete data.contrib_201209_new;
run;

proc contents data=data.contrib_201209( drop= ) memtype=data noprint out=_cntnts_( keep= name type ) ;
run ;
data _null_ ;
set _cntnts_ end=lastobs nobs=nobs ;
if nobs = 0 then stop ;
n_char + ( type = 2 ) ;
n_num + ( type = 1 ) ;
if lastobs then do ;
call symput( 'N_CHAR', left( put( n_char, 5. ))) ;
call symput( 'N_NUM' , left( put( n_num , 5. ))) ;
end ;
run ;
proc sql noprint ;
select name into :CHAR1 - :CHAR6 from _cntnts_ where type = 2 ;
select name into :NUM1 - :NUM15 from _cntnts_ where type = 1 ;
quit ;
data _null_ ;
set data.contrib_201209 end=lastobs ;
array _num_len_ ( 15 ) 3 _temporary_ ;
array _char_len_ ( 6 ) _temporary_ ;
if _n_ = 1 then do ;
do i = 1 to 6 ;
_char_len_( i ) = 0 ;
end ;
do i = 1 to 15 ;
_num_len_ ( i ) = 3 ;
end ;
end ;
_char_len_( 1 ) = max( _char_len_( 1 ), length( BRANCH )) ;
_char_len_( 2 ) = max( _char_len_( 2 ), length( HHID )) ;
_char_len_( 3 ) = max( _char_len_( 3 ), length( STATE )) ;
_char_len_( 4 ) = max( _char_len_( 4 ), length( ZIP )) ;
_char_len_( 5 ) = max( _char_len_( 5 ), length( band )) ;
_char_len_( 6 ) = max( _char_len_( 6 ), length( band_yr )) ;
if CBR ne . then do ;
if CBR ne trunc( CBR, 7 ) then _num_len_( 1 ) = max( _num_len_( 1 ), 8 ) ;
else if CBR ne trunc( CBR, 6 ) then _num_len_( 1 ) = max( _num_len_( 1 ), 7 ) ;
else if CBR ne trunc( CBR, 5 ) then _num_len_( 1 ) = max( _num_len_( 1 ), 6 ) ;
else if CBR ne trunc( CBR, 4 ) then _num_len_( 1 ) = max( _num_len_( 1 ), 5 ) ;
else if CBR ne trunc( CBR, 3 ) then _num_len_( 1 ) = max( _num_len_( 1 ), 4 ) ;
end ;
if DDA_CON ne . then do ;
if DDA_CON ne trunc( DDA_CON, 7 ) then _num_len_( 2 ) = max( _num_len_( 2 ), 8 ) ;
else if DDA_CON ne trunc( DDA_CON, 6 ) then _num_len_( 2 ) = max( _num_len_( 2 ), 7 ) ;
else if DDA_CON ne trunc( DDA_CON, 5 ) then _num_len_( 2 ) = max( _num_len_( 2 ), 6 ) ;
else if DDA_CON ne trunc( DDA_CON, 4 ) then _num_len_( 2 ) = max( _num_len_( 2 ), 5 ) ;
else if DDA_CON ne trunc( DDA_CON, 3 ) then _num_len_( 2 ) = max( _num_len_( 2 ), 4 ) ;
end ;
if ILN_CON ne . then do ;
if ILN_CON ne trunc( ILN_CON, 7 ) then _num_len_( 3 ) = max( _num_len_( 3 ), 8 ) ;
else if ILN_CON ne trunc( ILN_CON, 6 ) then _num_len_( 3 ) = max( _num_len_( 3 ), 7 ) ;
else if ILN_CON ne trunc( ILN_CON, 5 ) then _num_len_( 3 ) = max( _num_len_( 3 ), 6 ) ;
else if ILN_CON ne trunc( ILN_CON, 4 ) then _num_len_( 3 ) = max( _num_len_( 3 ), 5 ) ;
else if ILN_CON ne trunc( ILN_CON, 3 ) then _num_len_( 3 ) = max( _num_len_( 3 ), 4 ) ;
end ;
if IND_con ne . then do ;
if IND_con ne trunc( IND_con, 7 ) then _num_len_( 4 ) = max( _num_len_( 4 ), 8 ) ;
else if IND_con ne trunc( IND_con, 6 ) then _num_len_( 4 ) = max( _num_len_( 4 ), 7 ) ;
else if IND_con ne trunc( IND_con, 5 ) then _num_len_( 4 ) = max( _num_len_( 4 ), 6 ) ;
else if IND_con ne trunc( IND_con, 4 ) then _num_len_( 4 ) = max( _num_len_( 4 ), 5 ) ;
else if IND_con ne trunc( IND_con, 3 ) then _num_len_( 4 ) = max( _num_len_( 4 ), 4 ) ;
end ;
if IRA_CON ne . then do ;
if IRA_CON ne trunc( IRA_CON, 7 ) then _num_len_( 5 ) = max( _num_len_( 5 ), 8 ) ;
else if IRA_CON ne trunc( IRA_CON, 6 ) then _num_len_( 5 ) = max( _num_len_( 5 ), 7 ) ;
else if IRA_CON ne trunc( IRA_CON, 5 ) then _num_len_( 5 ) = max( _num_len_( 5 ), 6 ) ;
else if IRA_CON ne trunc( IRA_CON, 4 ) then _num_len_( 5 ) = max( _num_len_( 5 ), 5 ) ;
else if IRA_CON ne trunc( IRA_CON, 3 ) then _num_len_( 5 ) = max( _num_len_( 5 ), 4 ) ;
end ;
if MARKET ne . then do ;
if MARKET ne trunc( MARKET, 7 ) then _num_len_( 6 ) = max( _num_len_( 6 ), 8 ) ;
else if MARKET ne trunc( MARKET, 6 ) then _num_len_( 6 ) = max( _num_len_( 6 ), 7 ) ;
else if MARKET ne trunc( MARKET, 5 ) then _num_len_( 6 ) = max( _num_len_( 6 ), 6 ) ;
else if MARKET ne trunc( MARKET, 4 ) then _num_len_( 6 ) = max( _num_len_( 6 ), 5 ) ;
else if MARKET ne trunc( MARKET, 3 ) then _num_len_( 6 ) = max( _num_len_( 6 ), 4 ) ;
end ;
if MMS_CON ne . then do ;
if MMS_CON ne trunc( MMS_CON, 7 ) then _num_len_( 7 ) = max( _num_len_( 7 ), 8 ) ;
else if MMS_CON ne trunc( MMS_CON, 6 ) then _num_len_( 7 ) = max( _num_len_( 7 ), 7 ) ;
else if MMS_CON ne trunc( MMS_CON, 5 ) then _num_len_( 7 ) = max( _num_len_( 7 ), 6 ) ;
else if MMS_CON ne trunc( MMS_CON, 4 ) then _num_len_( 7 ) = max( _num_len_( 7 ), 5 ) ;
else if MMS_CON ne trunc( MMS_CON, 3 ) then _num_len_( 7 ) = max( _num_len_( 7 ), 4 ) ;
end ;
if SAV_CON ne . then do ;
if SAV_CON ne trunc( SAV_CON, 7 ) then _num_len_( 8 ) = max( _num_len_( 8 ), 8 ) ;
else if SAV_CON ne trunc( SAV_CON, 6 ) then _num_len_( 8 ) = max( _num_len_( 8 ), 7 ) ;
else if SAV_CON ne trunc( SAV_CON, 5 ) then _num_len_( 8 ) = max( _num_len_( 8 ), 6 ) ;
else if SAV_CON ne trunc( SAV_CON, 4 ) then _num_len_( 8 ) = max( _num_len_( 8 ), 5 ) ;
else if SAV_CON ne trunc( SAV_CON, 3 ) then _num_len_( 8 ) = max( _num_len_( 8 ), 4 ) ;
end ;
if SEC_CON ne . then do ;
if SEC_CON ne trunc( SEC_CON, 7 ) then _num_len_( 9 ) = max( _num_len_( 9 ), 8 ) ;
else if SEC_CON ne trunc( SEC_CON, 6 ) then _num_len_( 9 ) = max( _num_len_( 9 ), 7 ) ;
else if SEC_CON ne trunc( SEC_CON, 5 ) then _num_len_( 9 ) = max( _num_len_( 9 ), 6 ) ;
else if SEC_CON ne trunc( SEC_CON, 4 ) then _num_len_( 9 ) = max( _num_len_( 9 ), 5 ) ;
else if SEC_CON ne trunc( SEC_CON, 3 ) then _num_len_( 9 ) = max( _num_len_( 9 ), 4 ) ;
end ;
if SLN_CON ne . then do ;
if SLN_CON ne trunc( SLN_CON, 7 ) then _num_len_( 10 ) = max( _num_len_( 10 ), 8 ) ;
else if SLN_CON ne trunc( SLN_CON, 6 ) then _num_len_( 10 ) = max( _num_len_( 10 ), 7 ) ;
else if SLN_CON ne trunc( SLN_CON, 5 ) then _num_len_( 10 ) = max( _num_len_( 10 ), 6 ) ;
else if SLN_CON ne trunc( SLN_CON, 4 ) then _num_len_( 10 ) = max( _num_len_( 10 ), 5 ) ;
else if SLN_CON ne trunc( SLN_CON, 3 ) then _num_len_( 10 ) = max( _num_len_( 10 ), 4 ) ;
end ;
if TDA_CON ne . then do ;
if TDA_CON ne trunc( TDA_CON, 7 ) then _num_len_( 11 ) = max( _num_len_( 11 ), 8 ) ;
else if TDA_CON ne trunc( TDA_CON, 6 ) then _num_len_( 11 ) = max( _num_len_( 11 ), 7 ) ;
else if TDA_CON ne trunc( TDA_CON, 5 ) then _num_len_( 11 ) = max( _num_len_( 11 ), 6 ) ;
else if TDA_CON ne trunc( TDA_CON, 4 ) then _num_len_( 11 ) = max( _num_len_( 11 ), 5 ) ;
else if TDA_CON ne trunc( TDA_CON, 3 ) then _num_len_( 11 ) = max( _num_len_( 11 ), 4 ) ;
end ;
if TRS_CON ne . then do ;
if TRS_CON ne trunc( TRS_CON, 7 ) then _num_len_( 12 ) = max( _num_len_( 12 ), 8 ) ;
else if TRS_CON ne trunc( TRS_CON, 6 ) then _num_len_( 12 ) = max( _num_len_( 12 ), 7 ) ;
else if TRS_CON ne trunc( TRS_CON, 5 ) then _num_len_( 12 ) = max( _num_len_( 12 ), 6 ) ;
else if TRS_CON ne trunc( TRS_CON, 4 ) then _num_len_( 12 ) = max( _num_len_( 12 ), 5 ) ;
else if TRS_CON ne trunc( TRS_CON, 3 ) then _num_len_( 12 ) = max( _num_len_( 12 ), 4 ) ;
end ;
if card_con ne . then do ;
if card_con ne trunc( card_con, 7 ) then _num_len_( 13 ) = max( _num_len_( 13 ), 8 ) ;
else if card_con ne trunc( card_con, 6 ) then _num_len_( 13 ) = max( _num_len_( 13 ), 7 ) ;
else if card_con ne trunc( card_con, 5 ) then _num_len_( 13 ) = max( _num_len_( 13 ), 6 ) ;
else if card_con ne trunc( card_con, 4 ) then _num_len_( 13 ) = max( _num_len_( 13 ), 5 ) ;
else if card_con ne trunc( card_con, 3 ) then _num_len_( 13 ) = max( _num_len_( 13 ), 4 ) ;
end ;
if heq_con ne . then do ;
if heq_con ne trunc( heq_con, 7 ) then _num_len_( 14 ) = max( _num_len_( 14 ), 8 ) ;
else if heq_con ne trunc( heq_con, 6 ) then _num_len_( 14 ) = max( _num_len_( 14 ), 7 ) ;
else if heq_con ne trunc( heq_con, 5 ) then _num_len_( 14 ) = max( _num_len_( 14 ), 6 ) ;
else if heq_con ne trunc( heq_con, 4 ) then _num_len_( 14 ) = max( _num_len_( 14 ), 5 ) ;
else if heq_con ne trunc( heq_con, 3 ) then _num_len_( 14 ) = max( _num_len_( 14 ), 4 ) ;
end ;
if mtg_con ne . then do ;
if mtg_con ne trunc( mtg_con, 7 ) then _num_len_( 15 ) = max( _num_len_( 15 ), 8 ) ;
else if mtg_con ne trunc( mtg_con, 6 ) then _num_len_( 15 ) = max( _num_len_( 15 ), 7 ) ;
else if mtg_con ne trunc( mtg_con, 5 ) then _num_len_( 15 ) = max( _num_len_( 15 ), 6 ) ;
else if mtg_con ne trunc( mtg_con, 4 ) then _num_len_( 15 ) = max( _num_len_( 15 ), 5 ) ;
else if mtg_con ne trunc( mtg_con, 3 ) then _num_len_( 15 ) = max( _num_len_( 15 ), 4 ) ;
end ;
if lastobs then do ;
call symput( "CHARLEN1", put( _char_len_( 1 ), 5. )) ;
call symput( "CHARLEN2", put( _char_len_( 2 ), 5. )) ;
call symput( "CHARLEN3", put( _char_len_( 3 ), 5. )) ;
call symput( "CHARLEN4", put( _char_len_( 4 ), 5. )) ;
call symput( "CHARLEN5", put( _char_len_( 5 ), 5. )) ;
call symput( "CHARLEN6", put( _char_len_( 6 ), 5. )) ;
call symput( "NUMLEN1", put( _num_len_( 1 ), 1. )) ;
call symput( "NUMLEN2", put( _num_len_( 2 ), 1. )) ;
call symput( "NUMLEN3", put( _num_len_( 3 ), 1. )) ;
call symput( "NUMLEN4", put( _num_len_( 4 ), 1. )) ;
call symput( "NUMLEN5", put( _num_len_( 5 ), 1. )) ;
call symput( "NUMLEN6", put( _num_len_( 6 ), 1. )) ;
call symput( "NUMLEN7", put( _num_len_( 7 ), 1. )) ;
call symput( "NUMLEN8", put( _num_len_( 8 ), 1. )) ;
call symput( "NUMLEN9", put( _num_len_( 9 ), 1. )) ;
call symput( "NUMLEN10", put( _num_len_( 10 ), 1. )) ;
call symput( "NUMLEN11", put( _num_len_( 11 ), 1. )) ;
call symput( "NUMLEN12", put( _num_len_( 12 ), 1. )) ;
call symput( "NUMLEN13", put( _num_len_( 13 ), 1. )) ;
call symput( "NUMLEN14", put( _num_len_( 14 ), 1. )) ;
call symput( "NUMLEN15", put( _num_len_( 15 ), 1. )) ;
end ;
run ;
proc datasets nolist ;
delete _cntnts_ ;
run ;
data _null_ ;
length retain $32767 ;
retain retain 'retain ' ;
dsid = open( "data.contrib_201209", 'I' ) ;
do _i_ = 1 to attrn( dsid, 'nvars' ) ;
retain = trim( retain ) || ' ' || varname( dsid, _i_ ) ;
end ;
call symput( 'RETAIN', retain ) ;
run ;
data data.contrib_201209_new ;
retain HHID STATE ZIP BRANCH CBR MARKET DDA_CON MMS_CON SAV_CON TDA_CON IRA_CON SEC_CON TRS_CON mtg_con heq_con card_con ILN_CON SLN_CON band band_yr IND_con ;
LENGTH BRANCH $5 HHID $9 STATE $2 ZIP $5 band $1 band_yr $1 ;
LENGTH CBR 3 DDA_CON 8 ILN_CON 8 IND_con 8 IRA_CON 8 MARKET 3 MMS_CON 8 SAV_CON 8 SEC_CON 8 SLN_CON 8 TDA_CON 8 TRS_CON 8 card_con 8 heq_con 8 mtg_con 8 ;
FORMAT BRANCH $5. HHID $9. STATE $2. ZIP $5. band $1. band_yr $1. ;
set data.contrib_201209 ;
run ;
proc contents data=data.main_201209( drop= ) memtype=data noprint out=_cntnts_( keep= name type ) ;
run ;
data _null_ ;
set _cntnts_ end=lastobs nobs=nobs ;
if nobs = 0 then stop ;
n_char + ( type = 2 ) ;
n_num + ( type = 1 ) ;
if lastobs then do ;
call symput( 'N_CHAR', left( put( n_char, 5. ))) ;
call symput( 'N_NUM' , left( put( n_num , 5. ))) ;
end ;
run ;
proc sql noprint ;
select name into :CHAR1 - :CHAR9 from _cntnts_ where type = 2 ;
select name into :NUM1 - :NUM87 from _cntnts_ where type = 1 ;
quit ;
data _null_ ;
set data.main_201209 end=lastobs ;
array _num_len_ ( 87 ) 3 _temporary_ ;
array _char_len_ ( 9 ) _temporary_ ;
if _n_ = 1 then do ;
do i = 1 to 9 ;
_char_len_( i ) = 0 ;
end ;
do i = 1 to 87 ;
_num_len_ ( i ) = 3 ;
end ;
end ;
_char_len_( 1 ) = max( _char_len_( 1 ), length( BRANCH )) ;
_char_len_( 2 ) = max( _char_len_( 2 ), length( HHID )) ;
_char_len_( 3 ) = max( _char_len_( 3 ), length( RM )) ;
_char_len_( 4 ) = max( _char_len_( 4 ), length( STATE )) ;
_char_len_( 5 ) = max( _char_len_( 5 ), length( ZIP )) ;
_char_len_( 6 ) = max( _char_len_( 6 ), length( band )) ;
_char_len_( 7 ) = max( _char_len_( 7 ), length( band_yr )) ;
_char_len_( 8 ) = max( _char_len_( 8 ), length( source )) ;
_char_len_( 9 ) = max( _char_len_( 9 ), length( tran_code )) ;
if ATMO_AMT ne . then do ;
if ATMO_AMT ne trunc( ATMO_AMT, 7 ) then _num_len_( 1 ) = max( _num_len_( 1 ), 8 ) ;
else if ATMO_AMT ne trunc( ATMO_AMT, 6 ) then _num_len_( 1 ) = max( _num_len_( 1 ), 7 ) ;
else if ATMO_AMT ne trunc( ATMO_AMT, 5 ) then _num_len_( 1 ) = max( _num_len_( 1 ), 6 ) ;
else if ATMO_AMT ne trunc( ATMO_AMT, 4 ) then _num_len_( 1 ) = max( _num_len_( 1 ), 5 ) ;
else if ATMO_AMT ne trunc( ATMO_AMT, 3 ) then _num_len_( 1 ) = max( _num_len_( 1 ), 4 ) ;
end ;
if ATMO_NUM ne . then do ;
if ATMO_NUM ne trunc( ATMO_NUM, 7 ) then _num_len_( 2 ) = max( _num_len_( 2 ), 8 ) ;
else if ATMO_NUM ne trunc( ATMO_NUM, 6 ) then _num_len_( 2 ) = max( _num_len_( 2 ), 7 ) ;
else if ATMO_NUM ne trunc( ATMO_NUM, 5 ) then _num_len_( 2 ) = max( _num_len_( 2 ), 6 ) ;
else if ATMO_NUM ne trunc( ATMO_NUM, 4 ) then _num_len_( 2 ) = max( _num_len_( 2 ), 5 ) ;
else if ATMO_NUM ne trunc( ATMO_NUM, 3 ) then _num_len_( 2 ) = max( _num_len_( 2 ), 4 ) ;
end ;
if ATMT_AMT ne . then do ;
if ATMT_AMT ne trunc( ATMT_AMT, 7 ) then _num_len_( 3 ) = max( _num_len_( 3 ), 8 ) ;
else if ATMT_AMT ne trunc( ATMT_AMT, 6 ) then _num_len_( 3 ) = max( _num_len_( 3 ), 7 ) ;
else if ATMT_AMT ne trunc( ATMT_AMT, 5 ) then _num_len_( 3 ) = max( _num_len_( 3 ), 6 ) ;
else if ATMT_AMT ne trunc( ATMT_AMT, 4 ) then _num_len_( 3 ) = max( _num_len_( 3 ), 5 ) ;
else if ATMT_AMT ne trunc( ATMT_AMT, 3 ) then _num_len_( 3 ) = max( _num_len_( 3 ), 4 ) ;
end ;
if ATMT_NUM ne . then do ;
if ATMT_NUM ne trunc( ATMT_NUM, 7 ) then _num_len_( 4 ) = max( _num_len_( 4 ), 8 ) ;
else if ATMT_NUM ne trunc( ATMT_NUM, 6 ) then _num_len_( 4 ) = max( _num_len_( 4 ), 7 ) ;
else if ATMT_NUM ne trunc( ATMT_NUM, 5 ) then _num_len_( 4 ) = max( _num_len_( 4 ), 6 ) ;
else if ATMT_NUM ne trunc( ATMT_NUM, 4 ) then _num_len_( 4 ) = max( _num_len_( 4 ), 5 ) ;
else if ATMT_NUM ne trunc( ATMT_NUM, 3 ) then _num_len_( 4 ) = max( _num_len_( 4 ), 4 ) ;
end ;
if BP_AMT ne . then do ;
if BP_AMT ne trunc( BP_AMT, 7 ) then _num_len_( 5 ) = max( _num_len_( 5 ), 8 ) ;
else if BP_AMT ne trunc( BP_AMT, 6 ) then _num_len_( 5 ) = max( _num_len_( 5 ), 7 ) ;
else if BP_AMT ne trunc( BP_AMT, 5 ) then _num_len_( 5 ) = max( _num_len_( 5 ), 6 ) ;
else if BP_AMT ne trunc( BP_AMT, 4 ) then _num_len_( 5 ) = max( _num_len_( 5 ), 5 ) ;
else if BP_AMT ne trunc( BP_AMT, 3 ) then _num_len_( 5 ) = max( _num_len_( 5 ), 4 ) ;
end ;
if BP_NUM ne . then do ;
if BP_NUM ne trunc( BP_NUM, 7 ) then _num_len_( 6 ) = max( _num_len_( 6 ), 8 ) ;
else if BP_NUM ne trunc( BP_NUM, 6 ) then _num_len_( 6 ) = max( _num_len_( 6 ), 7 ) ;
else if BP_NUM ne trunc( BP_NUM, 5 ) then _num_len_( 6 ) = max( _num_len_( 6 ), 6 ) ;
else if BP_NUM ne trunc( BP_NUM, 4 ) then _num_len_( 6 ) = max( _num_len_( 6 ), 5 ) ;
else if BP_NUM ne trunc( BP_NUM, 3 ) then _num_len_( 6 ) = max( _num_len_( 6 ), 4 ) ;
end ;
if BR_TR_NUM ne . then do ;
if BR_TR_NUM ne trunc( BR_TR_NUM, 7 ) then _num_len_( 7 ) = max( _num_len_( 7 ), 8 ) ;
else if BR_TR_NUM ne trunc( BR_TR_NUM, 6 ) then _num_len_( 7 ) = max( _num_len_( 7 ), 7 ) ;
else if BR_TR_NUM ne trunc( BR_TR_NUM, 5 ) then _num_len_( 7 ) = max( _num_len_( 7 ), 6 ) ;
else if BR_TR_NUM ne trunc( BR_TR_NUM, 4 ) then _num_len_( 7 ) = max( _num_len_( 7 ), 5 ) ;
else if BR_TR_NUM ne trunc( BR_TR_NUM, 3 ) then _num_len_( 7 ) = max( _num_len_( 7 ), 4 ) ;
end ;
if BR_TR_amt ne . then do ;
if BR_TR_amt ne trunc( BR_TR_amt, 7 ) then _num_len_( 8 ) = max( _num_len_( 8 ), 8 ) ;
else if BR_TR_amt ne trunc( BR_TR_amt, 6 ) then _num_len_( 8 ) = max( _num_len_( 8 ), 7 ) ;
else if BR_TR_amt ne trunc( BR_TR_amt, 5 ) then _num_len_( 8 ) = max( _num_len_( 8 ), 6 ) ;
else if BR_TR_amt ne trunc( BR_TR_amt, 4 ) then _num_len_( 8 ) = max( _num_len_( 8 ), 5 ) ;
else if BR_TR_amt ne trunc( BR_TR_amt, 3 ) then _num_len_( 8 ) = max( _num_len_( 8 ), 4 ) ;
end ;
if CBR ne . then do ;
if CBR ne trunc( CBR, 7 ) then _num_len_( 9 ) = max( _num_len_( 9 ), 8 ) ;
else if CBR ne trunc( CBR, 6 ) then _num_len_( 9 ) = max( _num_len_( 9 ), 7 ) ;
else if CBR ne trunc( CBR, 5 ) then _num_len_( 9 ) = max( _num_len_( 9 ), 6 ) ;
else if CBR ne trunc( CBR, 4 ) then _num_len_( 9 ) = max( _num_len_( 9 ), 5 ) ;
else if CBR ne trunc( CBR, 3 ) then _num_len_( 9 ) = max( _num_len_( 9 ), 4 ) ;
end ;
if DDA_Amt ne . then do ;
if DDA_Amt ne trunc( DDA_Amt, 7 ) then _num_len_( 10 ) = max( _num_len_( 10 ), 8 ) ;
else if DDA_Amt ne trunc( DDA_Amt, 6 ) then _num_len_( 10 ) = max( _num_len_( 10 ), 7 ) ;
else if DDA_Amt ne trunc( DDA_Amt, 5 ) then _num_len_( 10 ) = max( _num_len_( 10 ), 6 ) ;
else if DDA_Amt ne trunc( DDA_Amt, 4 ) then _num_len_( 10 ) = max( _num_len_( 10 ), 5 ) ;
else if DDA_Amt ne trunc( DDA_Amt, 3 ) then _num_len_( 10 ) = max( _num_len_( 10 ), 4 ) ;
end ;
if FWorks ne . then do ;
if FWorks ne trunc( FWorks, 7 ) then _num_len_( 11 ) = max( _num_len_( 11 ), 8 ) ;
else if FWorks ne trunc( FWorks, 6 ) then _num_len_( 11 ) = max( _num_len_( 11 ), 7 ) ;
else if FWorks ne trunc( FWorks, 5 ) then _num_len_( 11 ) = max( _num_len_( 11 ), 6 ) ;
else if FWorks ne trunc( FWorks, 4 ) then _num_len_( 11 ) = max( _num_len_( 11 ), 5 ) ;
else if FWorks ne trunc( FWorks, 3 ) then _num_len_( 11 ) = max( _num_len_( 11 ), 4 ) ;
end ;
if HEQ_Amt ne . then do ;
if HEQ_Amt ne trunc( HEQ_Amt, 7 ) then _num_len_( 12 ) = max( _num_len_( 12 ), 8 ) ;
else if HEQ_Amt ne trunc( HEQ_Amt, 6 ) then _num_len_( 12 ) = max( _num_len_( 12 ), 7 ) ;
else if HEQ_Amt ne trunc( HEQ_Amt, 5 ) then _num_len_( 12 ) = max( _num_len_( 12 ), 6 ) ;
else if HEQ_Amt ne trunc( HEQ_Amt, 4 ) then _num_len_( 12 ) = max( _num_len_( 12 ), 5 ) ;
else if HEQ_Amt ne trunc( HEQ_Amt, 3 ) then _num_len_( 12 ) = max( _num_len_( 12 ), 4 ) ;
end ;
if ILN ne . then do ;
if ILN ne trunc( ILN, 7 ) then _num_len_( 13 ) = max( _num_len_( 13 ), 8 ) ;
else if ILN ne trunc( ILN, 6 ) then _num_len_( 13 ) = max( _num_len_( 13 ), 7 ) ;
else if ILN ne trunc( ILN, 5 ) then _num_len_( 13 ) = max( _num_len_( 13 ), 6 ) ;
else if ILN ne trunc( ILN, 4 ) then _num_len_( 13 ) = max( _num_len_( 13 ), 5 ) ;
else if ILN ne trunc( ILN, 3 ) then _num_len_( 13 ) = max( _num_len_( 13 ), 4 ) ;
end ;
if IND ne . then do ;
if IND ne trunc( IND, 7 ) then _num_len_( 14 ) = max( _num_len_( 14 ), 8 ) ;
else if IND ne trunc( IND, 6 ) then _num_len_( 14 ) = max( _num_len_( 14 ), 7 ) ;
else if IND ne trunc( IND, 5 ) then _num_len_( 14 ) = max( _num_len_( 14 ), 6 ) ;
else if IND ne trunc( IND, 4 ) then _num_len_( 14 ) = max( _num_len_( 14 ), 5 ) ;
else if IND ne trunc( IND, 3 ) then _num_len_( 14 ) = max( _num_len_( 14 ), 4 ) ;
end ;
if IND_AMT ne . then do ;
if IND_AMT ne trunc( IND_AMT, 7 ) then _num_len_( 15 ) = max( _num_len_( 15 ), 8 ) ;
else if IND_AMT ne trunc( IND_AMT, 6 ) then _num_len_( 15 ) = max( _num_len_( 15 ), 7 ) ;
else if IND_AMT ne trunc( IND_AMT, 5 ) then _num_len_( 15 ) = max( _num_len_( 15 ), 6 ) ;
else if IND_AMT ne trunc( IND_AMT, 4 ) then _num_len_( 15 ) = max( _num_len_( 15 ), 5 ) ;
else if IND_AMT ne trunc( IND_AMT, 3 ) then _num_len_( 15 ) = max( _num_len_( 15 ), 4 ) ;
end ;
if IRA_amt ne . then do ;
if IRA_amt ne trunc( IRA_amt, 7 ) then _num_len_( 16 ) = max( _num_len_( 16 ), 8 ) ;
else if IRA_amt ne trunc( IRA_amt, 6 ) then _num_len_( 16 ) = max( _num_len_( 16 ), 7 ) ;
else if IRA_amt ne trunc( IRA_amt, 5 ) then _num_len_( 16 ) = max( _num_len_( 16 ), 6 ) ;
else if IRA_amt ne trunc( IRA_amt, 4 ) then _num_len_( 16 ) = max( _num_len_( 16 ), 5 ) ;
else if IRA_amt ne trunc( IRA_amt, 3 ) then _num_len_( 16 ) = max( _num_len_( 16 ), 4 ) ;
end ;
if IXI_tot ne . then do ;
if IXI_tot ne trunc( IXI_tot, 7 ) then _num_len_( 17 ) = max( _num_len_( 17 ), 8 ) ;
else if IXI_tot ne trunc( IXI_tot, 6 ) then _num_len_( 17 ) = max( _num_len_( 17 ), 7 ) ;
else if IXI_tot ne trunc( IXI_tot, 5 ) then _num_len_( 17 ) = max( _num_len_( 17 ), 6 ) ;
else if IXI_tot ne trunc( IXI_tot, 4 ) then _num_len_( 17 ) = max( _num_len_( 17 ), 5 ) ;
else if IXI_tot ne trunc( IXI_tot, 3 ) then _num_len_( 17 ) = max( _num_len_( 17 ), 4 ) ;
end ;
if IXi_Annuity ne . then do ;
if IXi_Annuity ne trunc( IXi_Annuity, 7 ) then _num_len_( 18 ) = max( _num_len_( 18 ), 8 ) ;
else if IXi_Annuity ne trunc( IXi_Annuity, 6 ) then _num_len_( 18 ) = max( _num_len_( 18 ), 7 ) ;
else if IXi_Annuity ne trunc( IXi_Annuity, 5 ) then _num_len_( 18 ) = max( _num_len_( 18 ), 6 ) ;
else if IXi_Annuity ne trunc( IXi_Annuity, 4 ) then _num_len_( 18 ) = max( _num_len_( 18 ), 5 ) ;
else if IXi_Annuity ne trunc( IXi_Annuity, 3 ) then _num_len_( 18 ) = max( _num_len_( 18 ), 4 ) ;
end ;
if MARKET ne . then do ;
if MARKET ne trunc( MARKET, 7 ) then _num_len_( 19 ) = max( _num_len_( 19 ), 8 ) ;
else if MARKET ne trunc( MARKET, 6 ) then _num_len_( 19 ) = max( _num_len_( 19 ), 7 ) ;
else if MARKET ne trunc( MARKET, 5 ) then _num_len_( 19 ) = max( _num_len_( 19 ), 6 ) ;
else if MARKET ne trunc( MARKET, 4 ) then _num_len_( 19 ) = max( _num_len_( 19 ), 5 ) ;
else if MARKET ne trunc( MARKET, 3 ) then _num_len_( 19 ) = max( _num_len_( 19 ), 4 ) ;
end ;
if MMS_amt ne . then do ;
if MMS_amt ne trunc( MMS_amt, 7 ) then _num_len_( 20 ) = max( _num_len_( 20 ), 8 ) ;
else if MMS_amt ne trunc( MMS_amt, 6 ) then _num_len_( 20 ) = max( _num_len_( 20 ), 7 ) ;
else if MMS_amt ne trunc( MMS_amt, 5 ) then _num_len_( 20 ) = max( _num_len_( 20 ), 6 ) ;
else if MMS_amt ne trunc( MMS_amt, 4 ) then _num_len_( 20 ) = max( _num_len_( 20 ), 5 ) ;
else if MMS_amt ne trunc( MMS_amt, 3 ) then _num_len_( 20 ) = max( _num_len_( 20 ), 4 ) ;
end ;
if MTG_amt ne . then do ;
if MTG_amt ne trunc( MTG_amt, 7 ) then _num_len_( 21 ) = max( _num_len_( 21 ), 8 ) ;
else if MTG_amt ne trunc( MTG_amt, 6 ) then _num_len_( 21 ) = max( _num_len_( 21 ), 7 ) ;
else if MTG_amt ne trunc( MTG_amt, 5 ) then _num_len_( 21 ) = max( _num_len_( 21 ), 6 ) ;
else if MTG_amt ne trunc( MTG_amt, 4 ) then _num_len_( 21 ) = max( _num_len_( 21 ), 5 ) ;
else if MTG_amt ne trunc( MTG_amt, 3 ) then _num_len_( 21 ) = max( _num_len_( 21 ), 4 ) ;
end ;
if SMS ne . then do ;
if SMS ne trunc( SMS, 7 ) then _num_len_( 22 ) = max( _num_len_( 22 ), 8 ) ;
else if SMS ne trunc( SMS, 6 ) then _num_len_( 22 ) = max( _num_len_( 22 ), 7 ) ;
else if SMS ne trunc( SMS, 5 ) then _num_len_( 22 ) = max( _num_len_( 22 ), 6 ) ;
else if SMS ne trunc( SMS, 4 ) then _num_len_( 22 ) = max( _num_len_( 22 ), 5 ) ;
else if SMS ne trunc( SMS, 3 ) then _num_len_( 22 ) = max( _num_len_( 22 ), 4 ) ;
end ;
if SMS_NUM ne . then do ;
if SMS_NUM ne trunc( SMS_NUM, 7 ) then _num_len_( 23 ) = max( _num_len_( 23 ), 8 ) ;
else if SMS_NUM ne trunc( SMS_NUM, 6 ) then _num_len_( 23 ) = max( _num_len_( 23 ), 7 ) ;
else if SMS_NUM ne trunc( SMS_NUM, 5 ) then _num_len_( 23 ) = max( _num_len_( 23 ), 6 ) ;
else if SMS_NUM ne trunc( SMS_NUM, 4 ) then _num_len_( 23 ) = max( _num_len_( 23 ), 5 ) ;
else if SMS_NUM ne trunc( SMS_NUM, 3 ) then _num_len_( 23 ) = max( _num_len_( 23 ), 4 ) ;
end ;
if TDA_Amt ne . then do ;
if TDA_Amt ne trunc( TDA_Amt, 7 ) then _num_len_( 24 ) = max( _num_len_( 24 ), 8 ) ;
else if TDA_Amt ne trunc( TDA_Amt, 6 ) then _num_len_( 24 ) = max( _num_len_( 24 ), 7 ) ;
else if TDA_Amt ne trunc( TDA_Amt, 5 ) then _num_len_( 24 ) = max( _num_len_( 24 ), 6 ) ;
else if TDA_Amt ne trunc( TDA_Amt, 4 ) then _num_len_( 24 ) = max( _num_len_( 24 ), 5 ) ;
else if TDA_Amt ne trunc( TDA_Amt, 3 ) then _num_len_( 24 ) = max( _num_len_( 24 ), 4 ) ;
end ;
if VPOS_AMT ne . then do ;
if VPOS_AMT ne trunc( VPOS_AMT, 7 ) then _num_len_( 25 ) = max( _num_len_( 25 ), 8 ) ;
else if VPOS_AMT ne trunc( VPOS_AMT, 6 ) then _num_len_( 25 ) = max( _num_len_( 25 ), 7 ) ;
else if VPOS_AMT ne trunc( VPOS_AMT, 5 ) then _num_len_( 25 ) = max( _num_len_( 25 ), 6 ) ;
else if VPOS_AMT ne trunc( VPOS_AMT, 4 ) then _num_len_( 25 ) = max( _num_len_( 25 ), 5 ) ;
else if VPOS_AMT ne trunc( VPOS_AMT, 3 ) then _num_len_( 25 ) = max( _num_len_( 25 ), 4 ) ;
end ;
if VRU_NUM ne . then do ;
if VRU_NUM ne trunc( VRU_NUM, 7 ) then _num_len_( 26 ) = max( _num_len_( 26 ), 8 ) ;
else if VRU_NUM ne trunc( VRU_NUM, 6 ) then _num_len_( 26 ) = max( _num_len_( 26 ), 7 ) ;
else if VRU_NUM ne trunc( VRU_NUM, 5 ) then _num_len_( 26 ) = max( _num_len_( 26 ), 6 ) ;
else if VRU_NUM ne trunc( VRU_NUM, 4 ) then _num_len_( 26 ) = max( _num_len_( 26 ), 5 ) ;
else if VRU_NUM ne trunc( VRU_NUM, 3 ) then _num_len_( 26 ) = max( _num_len_( 26 ), 4 ) ;
end ;
if WAP ne . then do ;
if WAP ne trunc( WAP, 7 ) then _num_len_( 27 ) = max( _num_len_( 27 ), 8 ) ;
else if WAP ne trunc( WAP, 6 ) then _num_len_( 27 ) = max( _num_len_( 27 ), 7 ) ;
else if WAP ne trunc( WAP, 5 ) then _num_len_( 27 ) = max( _num_len_( 27 ), 6 ) ;
else if WAP ne trunc( WAP, 4 ) then _num_len_( 27 ) = max( _num_len_( 27 ), 5 ) ;
else if WAP ne trunc( WAP, 3 ) then _num_len_( 27 ) = max( _num_len_( 27 ), 4 ) ;
end ;
if WAP_NUM ne . then do ;
if WAP_NUM ne trunc( WAP_NUM, 7 ) then _num_len_( 28 ) = max( _num_len_( 28 ), 8 ) ;
else if WAP_NUM ne trunc( WAP_NUM, 6 ) then _num_len_( 28 ) = max( _num_len_( 28 ), 7 ) ;
else if WAP_NUM ne trunc( WAP_NUM, 5 ) then _num_len_( 28 ) = max( _num_len_( 28 ), 6 ) ;
else if WAP_NUM ne trunc( WAP_NUM, 4 ) then _num_len_( 28 ) = max( _num_len_( 28 ), 5 ) ;
else if WAP_NUM ne trunc( WAP_NUM, 3 ) then _num_len_( 28 ) = max( _num_len_( 28 ), 4 ) ;
end ;
if WAS ne . then do ;
if WAS ne trunc( WAS, 7 ) then _num_len_( 29 ) = max( _num_len_( 29 ), 8 ) ;
else if WAS ne trunc( WAS, 6 ) then _num_len_( 29 ) = max( _num_len_( 29 ), 7 ) ;
else if WAS ne trunc( WAS, 5 ) then _num_len_( 29 ) = max( _num_len_( 29 ), 6 ) ;
else if WAS ne trunc( WAS, 4 ) then _num_len_( 29 ) = max( _num_len_( 29 ), 5 ) ;
else if WAS ne trunc( WAS, 3 ) then _num_len_( 29 ) = max( _num_len_( 29 ), 4 ) ;
end ;
if WFO ne . then do ;
if WFO ne trunc( WFO, 7 ) then _num_len_( 30 ) = max( _num_len_( 30 ), 8 ) ;
else if WFO ne trunc( WFO, 6 ) then _num_len_( 30 ) = max( _num_len_( 30 ), 7 ) ;
else if WFO ne trunc( WFO, 5 ) then _num_len_( 30 ) = max( _num_len_( 30 ), 6 ) ;
else if WFO ne trunc( WFO, 4 ) then _num_len_( 30 ) = max( _num_len_( 30 ), 5 ) ;
else if WFO ne trunc( WFO, 3 ) then _num_len_( 30 ) = max( _num_len_( 30 ), 4 ) ;
end ;
if bp ne . then do ;
if bp ne trunc( bp, 7 ) then _num_len_( 31 ) = max( _num_len_( 31 ), 8 ) ;
else if bp ne trunc( bp, 6 ) then _num_len_( 31 ) = max( _num_len_( 31 ), 7 ) ;
else if bp ne trunc( bp, 5 ) then _num_len_( 31 ) = max( _num_len_( 31 ), 6 ) ;
else if bp ne trunc( bp, 4 ) then _num_len_( 31 ) = max( _num_len_( 31 ), 5 ) ;
else if bp ne trunc( bp, 3 ) then _num_len_( 31 ) = max( _num_len_( 31 ), 4 ) ;
end ;
if bus ne . then do ;
if bus ne trunc( bus, 7 ) then _num_len_( 32 ) = max( _num_len_( 32 ), 8 ) ;
else if bus ne trunc( bus, 6 ) then _num_len_( 32 ) = max( _num_len_( 32 ), 7 ) ;
else if bus ne trunc( bus, 5 ) then _num_len_( 32 ) = max( _num_len_( 32 ), 6 ) ;
else if bus ne trunc( bus, 4 ) then _num_len_( 32 ) = max( _num_len_( 32 ), 5 ) ;
else if bus ne trunc( bus, 3 ) then _num_len_( 32 ) = max( _num_len_( 32 ), 4 ) ;
end ;
if card ne . then do ;
if card ne trunc( card, 7 ) then _num_len_( 33 ) = max( _num_len_( 33 ), 8 ) ;
else if card ne trunc( card, 6 ) then _num_len_( 33 ) = max( _num_len_( 33 ), 7 ) ;
else if card ne trunc( card, 5 ) then _num_len_( 33 ) = max( _num_len_( 33 ), 6 ) ;
else if card ne trunc( card, 4 ) then _num_len_( 33 ) = max( _num_len_( 33 ), 5 ) ;
else if card ne trunc( card, 3 ) then _num_len_( 33 ) = max( _num_len_( 33 ), 4 ) ;
end ;
if ccs_Amt ne . then do ;
if ccs_Amt ne trunc( ccs_Amt, 7 ) then _num_len_( 34 ) = max( _num_len_( 34 ), 8 ) ;
else if ccs_Amt ne trunc( ccs_Amt, 6 ) then _num_len_( 34 ) = max( _num_len_( 34 ), 7 ) ;
else if ccs_Amt ne trunc( ccs_Amt, 5 ) then _num_len_( 34 ) = max( _num_len_( 34 ), 6 ) ;
else if ccs_Amt ne trunc( ccs_Amt, 4 ) then _num_len_( 34 ) = max( _num_len_( 34 ), 5 ) ;
else if ccs_Amt ne trunc( ccs_Amt, 3 ) then _num_len_( 34 ) = max( _num_len_( 34 ), 4 ) ;
end ;
if chk_num ne . then do ;
if chk_num ne trunc( chk_num, 7 ) then _num_len_( 35 ) = max( _num_len_( 35 ), 8 ) ;
else if chk_num ne trunc( chk_num, 6 ) then _num_len_( 35 ) = max( _num_len_( 35 ), 7 ) ;
else if chk_num ne trunc( chk_num, 5 ) then _num_len_( 35 ) = max( _num_len_( 35 ), 6 ) ;
else if chk_num ne trunc( chk_num, 4 ) then _num_len_( 35 ) = max( _num_len_( 35 ), 5 ) ;
else if chk_num ne trunc( chk_num, 3 ) then _num_len_( 35 ) = max( _num_len_( 35 ), 4 ) ;
end ;
if clv_rem ne . then do ;
if clv_rem ne trunc( clv_rem, 7 ) then _num_len_( 36 ) = max( _num_len_( 36 ), 8 ) ;
else if clv_rem ne trunc( clv_rem, 6 ) then _num_len_( 36 ) = max( _num_len_( 36 ), 7 ) ;
else if clv_rem ne trunc( clv_rem, 5 ) then _num_len_( 36 ) = max( _num_len_( 36 ), 6 ) ;
else if clv_rem ne trunc( clv_rem, 4 ) then _num_len_( 36 ) = max( _num_len_( 36 ), 5 ) ;
else if clv_rem ne trunc( clv_rem, 3 ) then _num_len_( 36 ) = max( _num_len_( 36 ), 4 ) ;
end ;
if clv_rem_ten ne . then do ;
if clv_rem_ten ne trunc( clv_rem_ten, 7 ) then _num_len_( 37 ) = max( _num_len_( 37 ), 8 ) ;
else if clv_rem_ten ne trunc( clv_rem_ten, 6 ) then _num_len_( 37 ) = max( _num_len_( 37 ), 7 ) ;
else if clv_rem_ten ne trunc( clv_rem_ten, 5 ) then _num_len_( 37 ) = max( _num_len_( 37 ), 6 ) ;
else if clv_rem_ten ne trunc( clv_rem_ten, 4 ) then _num_len_( 37 ) = max( _num_len_( 37 ), 5 ) ;
else if clv_rem_ten ne trunc( clv_rem_ten, 3 ) then _num_len_( 37 ) = max( _num_len_( 37 ), 4 ) ;
end ;
if clv_total ne . then do ;
if clv_total ne trunc( clv_total, 7 ) then _num_len_( 38 ) = max( _num_len_( 38 ), 8 ) ;
else if clv_total ne trunc( clv_total, 6 ) then _num_len_( 38 ) = max( _num_len_( 38 ), 7 ) ;
else if clv_total ne trunc( clv_total, 5 ) then _num_len_( 38 ) = max( _num_len_( 38 ), 6 ) ;
else if clv_total ne trunc( clv_total, 4 ) then _num_len_( 38 ) = max( _num_len_( 38 ), 5 ) ;
else if clv_total ne trunc( clv_total, 3 ) then _num_len_( 38 ) = max( _num_len_( 38 ), 4 ) ;
end ;
if com ne . then do ;
if com ne trunc( com, 7 ) then _num_len_( 39 ) = max( _num_len_( 39 ), 8 ) ;
else if com ne trunc( com, 6 ) then _num_len_( 39 ) = max( _num_len_( 39 ), 7 ) ;
else if com ne trunc( com, 5 ) then _num_len_( 39 ) = max( _num_len_( 39 ), 6 ) ;
else if com ne trunc( com, 4 ) then _num_len_( 39 ) = max( _num_len_( 39 ), 5 ) ;
else if com ne trunc( com, 3 ) then _num_len_( 39 ) = max( _num_len_( 39 ), 4 ) ;
end ;
if cqi_DD ne . then do ;
if cqi_DD ne trunc( cqi_DD, 7 ) then _num_len_( 40 ) = max( _num_len_( 40 ), 8 ) ;
else if cqi_DD ne trunc( cqi_DD, 6 ) then _num_len_( 40 ) = max( _num_len_( 40 ), 7 ) ;
else if cqi_DD ne trunc( cqi_DD, 5 ) then _num_len_( 40 ) = max( _num_len_( 40 ), 6 ) ;
else if cqi_DD ne trunc( cqi_DD, 4 ) then _num_len_( 40 ) = max( _num_len_( 40 ), 5 ) ;
else if cqi_DD ne trunc( cqi_DD, 3 ) then _num_len_( 40 ) = max( _num_len_( 40 ), 4 ) ;
end ;
if cqi_bp ne . then do ;
if cqi_bp ne trunc( cqi_bp, 7 ) then _num_len_( 41 ) = max( _num_len_( 41 ), 8 ) ;
else if cqi_bp ne trunc( cqi_bp, 6 ) then _num_len_( 41 ) = max( _num_len_( 41 ), 7 ) ;
else if cqi_bp ne trunc( cqi_bp, 5 ) then _num_len_( 41 ) = max( _num_len_( 41 ), 6 ) ;
else if cqi_bp ne trunc( cqi_bp, 4 ) then _num_len_( 41 ) = max( _num_len_( 41 ), 5 ) ;
else if cqi_bp ne trunc( cqi_bp, 3 ) then _num_len_( 41 ) = max( _num_len_( 41 ), 4 ) ;
end ;
if cqi_deb ne . then do ;
if cqi_deb ne trunc( cqi_deb, 7 ) then _num_len_( 42 ) = max( _num_len_( 42 ), 8 ) ;
else if cqi_deb ne trunc( cqi_deb, 6 ) then _num_len_( 42 ) = max( _num_len_( 42 ), 7 ) ;
else if cqi_deb ne trunc( cqi_deb, 5 ) then _num_len_( 42 ) = max( _num_len_( 42 ), 6 ) ;
else if cqi_deb ne trunc( cqi_deb, 4 ) then _num_len_( 42 ) = max( _num_len_( 42 ), 5 ) ;
else if cqi_deb ne trunc( cqi_deb, 3 ) then _num_len_( 42 ) = max( _num_len_( 42 ), 4 ) ;
end ;
if cqi_odl ne . then do ;
if cqi_odl ne trunc( cqi_odl, 7 ) then _num_len_( 43 ) = max( _num_len_( 43 ), 8 ) ;
else if cqi_odl ne trunc( cqi_odl, 6 ) then _num_len_( 43 ) = max( _num_len_( 43 ), 7 ) ;
else if cqi_odl ne trunc( cqi_odl, 5 ) then _num_len_( 43 ) = max( _num_len_( 43 ), 6 ) ;
else if cqi_odl ne trunc( cqi_odl, 4 ) then _num_len_( 43 ) = max( _num_len_( 43 ), 5 ) ;
else if cqi_odl ne trunc( cqi_odl, 3 ) then _num_len_( 43 ) = max( _num_len_( 43 ), 4 ) ;
end ;
if cqi_web ne . then do ;
if cqi_web ne trunc( cqi_web, 7 ) then _num_len_( 44 ) = max( _num_len_( 44 ), 8 ) ;
else if cqi_web ne trunc( cqi_web, 6 ) then _num_len_( 44 ) = max( _num_len_( 44 ), 7 ) ;
else if cqi_web ne trunc( cqi_web, 5 ) then _num_len_( 44 ) = max( _num_len_( 44 ), 6 ) ;
else if cqi_web ne trunc( cqi_web, 4 ) then _num_len_( 44 ) = max( _num_len_( 44 ), 5 ) ;
else if cqi_web ne trunc( cqi_web, 3 ) then _num_len_( 44 ) = max( _num_len_( 44 ), 4 ) ;
end ;
if dd_amt ne . then do ;
if dd_amt ne trunc( dd_amt, 7 ) then _num_len_( 45 ) = max( _num_len_( 45 ), 8 ) ;
else if dd_amt ne trunc( dd_amt, 6 ) then _num_len_( 45 ) = max( _num_len_( 45 ), 7 ) ;
else if dd_amt ne trunc( dd_amt, 5 ) then _num_len_( 45 ) = max( _num_len_( 45 ), 6 ) ;
else if dd_amt ne trunc( dd_amt, 4 ) then _num_len_( 45 ) = max( _num_len_( 45 ), 5 ) ;
else if dd_amt ne trunc( dd_amt, 3 ) then _num_len_( 45 ) = max( _num_len_( 45 ), 4 ) ;
end ;
if dda ne . then do ;
if dda ne trunc( dda, 7 ) then _num_len_( 46 ) = max( _num_len_( 46 ), 8 ) ;
else if dda ne trunc( dda, 6 ) then _num_len_( 46 ) = max( _num_len_( 46 ), 7 ) ;
else if dda ne trunc( dda, 5 ) then _num_len_( 46 ) = max( _num_len_( 46 ), 6 ) ;
else if dda ne trunc( dda, 4 ) then _num_len_( 46 ) = max( _num_len_( 46 ), 5 ) ;
else if dda ne trunc( dda, 3 ) then _num_len_( 46 ) = max( _num_len_( 46 ), 4 ) ;
end ;
if distance ne . then do ;
if distance ne trunc( distance, 7 ) then _num_len_( 47 ) = max( _num_len_( 47 ), 8 ) ;
else if distance ne trunc( distance, 6 ) then _num_len_( 47 ) = max( _num_len_( 47 ), 7 ) ;
else if distance ne trunc( distance, 5 ) then _num_len_( 47 ) = max( _num_len_( 47 ), 6 ) ;
else if distance ne trunc( distance, 4 ) then _num_len_( 47 ) = max( _num_len_( 47 ), 5 ) ;
else if distance ne trunc( distance, 3 ) then _num_len_( 47 ) = max( _num_len_( 47 ), 4 ) ;
end ;
if edeliv ne . then do ;
if edeliv ne trunc( edeliv, 7 ) then _num_len_( 48 ) = max( _num_len_( 48 ), 8 ) ;
else if edeliv ne trunc( edeliv, 6 ) then _num_len_( 48 ) = max( _num_len_( 48 ), 7 ) ;
else if edeliv ne trunc( edeliv, 5 ) then _num_len_( 48 ) = max( _num_len_( 48 ), 6 ) ;
else if edeliv ne trunc( edeliv, 4 ) then _num_len_( 48 ) = max( _num_len_( 48 ), 5 ) ;
else if edeliv ne trunc( edeliv, 3 ) then _num_len_( 48 ) = max( _num_len_( 48 ), 4 ) ;
end ;
if estat ne . then do ;
if estat ne trunc( estat, 7 ) then _num_len_( 49 ) = max( _num_len_( 49 ), 8 ) ;
else if estat ne trunc( estat, 6 ) then _num_len_( 49 ) = max( _num_len_( 49 ), 7 ) ;
else if estat ne trunc( estat, 5 ) then _num_len_( 49 ) = max( _num_len_( 49 ), 6 ) ;
else if estat ne trunc( estat, 4 ) then _num_len_( 49 ) = max( _num_len_( 49 ), 5 ) ;
else if estat ne trunc( estat, 3 ) then _num_len_( 49 ) = max( _num_len_( 49 ), 4 ) ;
end ;
if fico ne . then do ;
if fico ne trunc( fico, 7 ) then _num_len_( 50 ) = max( _num_len_( 50 ), 8 ) ;
else if fico ne trunc( fico, 6 ) then _num_len_( 50 ) = max( _num_len_( 50 ), 7 ) ;
else if fico ne trunc( fico, 5 ) then _num_len_( 50 ) = max( _num_len_( 50 ), 6 ) ;
else if fico ne trunc( fico, 4 ) then _num_len_( 50 ) = max( _num_len_( 50 ), 5 ) ;
else if fico ne trunc( fico, 3 ) then _num_len_( 50 ) = max( _num_len_( 50 ), 4 ) ;
end ;
if fico_num ne . then do ;
if fico_num ne trunc( fico_num, 7 ) then _num_len_( 51 ) = max( _num_len_( 51 ), 8 ) ;
else if fico_num ne trunc( fico_num, 6 ) then _num_len_( 51 ) = max( _num_len_( 51 ), 7 ) ;
else if fico_num ne trunc( fico_num, 5 ) then _num_len_( 51 ) = max( _num_len_( 51 ), 6 ) ;
else if fico_num ne trunc( fico_num, 4 ) then _num_len_( 51 ) = max( _num_len_( 51 ), 5 ) ;
else if fico_num ne trunc( fico_num, 3 ) then _num_len_( 51 ) = max( _num_len_( 51 ), 4 ) ;
end ;
if fworks_num ne . then do ;
if fworks_num ne trunc( fworks_num, 7 ) then _num_len_( 52 ) = max( _num_len_( 52 ), 8 ) ;
else if fworks_num ne trunc( fworks_num, 6 ) then _num_len_( 52 ) = max( _num_len_( 52 ), 7 ) ;
else if fworks_num ne trunc( fworks_num, 5 ) then _num_len_( 52 ) = max( _num_len_( 52 ), 6 ) ;
else if fworks_num ne trunc( fworks_num, 4 ) then _num_len_( 52 ) = max( _num_len_( 52 ), 5 ) ;
else if fworks_num ne trunc( fworks_num, 3 ) then _num_len_( 52 ) = max( _num_len_( 52 ), 4 ) ;
end ;
if grp ne . then do ;
if grp ne trunc( grp, 7 ) then _num_len_( 53 ) = max( _num_len_( 53 ), 8 ) ;
else if grp ne trunc( grp, 6 ) then _num_len_( 53 ) = max( _num_len_( 53 ), 7 ) ;
else if grp ne trunc( grp, 5 ) then _num_len_( 53 ) = max( _num_len_( 53 ), 6 ) ;
else if grp ne trunc( grp, 4 ) then _num_len_( 53 ) = max( _num_len_( 53 ), 5 ) ;
else if grp ne trunc( grp, 3 ) then _num_len_( 53 ) = max( _num_len_( 53 ), 4 ) ;
end ;
if heq ne . then do ;
if heq ne trunc( heq, 7 ) then _num_len_( 54 ) = max( _num_len_( 54 ), 8 ) ;
else if heq ne trunc( heq, 6 ) then _num_len_( 54 ) = max( _num_len_( 54 ), 7 ) ;
else if heq ne trunc( heq, 5 ) then _num_len_( 54 ) = max( _num_len_( 54 ), 6 ) ;
else if heq ne trunc( heq, 4 ) then _num_len_( 54 ) = max( _num_len_( 54 ), 5 ) ;
else if heq ne trunc( heq, 3 ) then _num_len_( 54 ) = max( _num_len_( 54 ), 4 ) ;
end ;
if hh ne . then do ;
if hh ne trunc( hh, 7 ) then _num_len_( 55 ) = max( _num_len_( 55 ), 8 ) ;
else if hh ne trunc( hh, 6 ) then _num_len_( 55 ) = max( _num_len_( 55 ), 7 ) ;
else if hh ne trunc( hh, 5 ) then _num_len_( 55 ) = max( _num_len_( 55 ), 6 ) ;
else if hh ne trunc( hh, 4 ) then _num_len_( 55 ) = max( _num_len_( 55 ), 5 ) ;
else if hh ne trunc( hh, 3 ) then _num_len_( 55 ) = max( _num_len_( 55 ), 4 ) ;
end ;
if iln_amt ne . then do ;
if iln_amt ne trunc( iln_amt, 7 ) then _num_len_( 56 ) = max( _num_len_( 56 ), 8 ) ;
else if iln_amt ne trunc( iln_amt, 6 ) then _num_len_( 56 ) = max( _num_len_( 56 ), 7 ) ;
else if iln_amt ne trunc( iln_amt, 5 ) then _num_len_( 56 ) = max( _num_len_( 56 ), 6 ) ;
else if iln_amt ne trunc( iln_amt, 4 ) then _num_len_( 56 ) = max( _num_len_( 56 ), 5 ) ;
else if iln_amt ne trunc( iln_amt, 3 ) then _num_len_( 56 ) = max( _num_len_( 56 ), 4 ) ;
end ;
if ins ne . then do ;
if ins ne trunc( ins, 7 ) then _num_len_( 57 ) = max( _num_len_( 57 ), 8 ) ;
else if ins ne trunc( ins, 6 ) then _num_len_( 57 ) = max( _num_len_( 57 ), 7 ) ;
else if ins ne trunc( ins, 5 ) then _num_len_( 57 ) = max( _num_len_( 57 ), 6 ) ;
else if ins ne trunc( ins, 4 ) then _num_len_( 57 ) = max( _num_len_( 57 ), 5 ) ;
else if ins ne trunc( ins, 3 ) then _num_len_( 57 ) = max( _num_len_( 57 ), 4 ) ;
end ;
if ira ne . then do ;
if ira ne trunc( ira, 7 ) then _num_len_( 58 ) = max( _num_len_( 58 ), 8 ) ;
else if ira ne trunc( ira, 6 ) then _num_len_( 58 ) = max( _num_len_( 58 ), 7 ) ;
else if ira ne trunc( ira, 5 ) then _num_len_( 58 ) = max( _num_len_( 58 ), 6 ) ;
else if ira ne trunc( ira, 4 ) then _num_len_( 58 ) = max( _num_len_( 58 ), 5 ) ;
else if ira ne trunc( ira, 3 ) then _num_len_( 58 ) = max( _num_len_( 58 ), 4 ) ;
end ;
if ixi_Bonds ne . then do ;
if ixi_Bonds ne trunc( ixi_Bonds, 7 ) then _num_len_( 59 ) = max( _num_len_( 59 ), 8 ) ;
else if ixi_Bonds ne trunc( ixi_Bonds, 6 ) then _num_len_( 59 ) = max( _num_len_( 59 ), 7 ) ;
else if ixi_Bonds ne trunc( ixi_Bonds, 5 ) then _num_len_( 59 ) = max( _num_len_( 59 ), 6 ) ;
else if ixi_Bonds ne trunc( ixi_Bonds, 4 ) then _num_len_( 59 ) = max( _num_len_( 59 ), 5 ) ;
else if ixi_Bonds ne trunc( ixi_Bonds, 3 ) then _num_len_( 59 ) = max( _num_len_( 59 ), 4 ) ;
end ;
if ixi_Funds ne . then do ;
if ixi_Funds ne trunc( ixi_Funds, 7 ) then _num_len_( 60 ) = max( _num_len_( 60 ), 8 ) ;
else if ixi_Funds ne trunc( ixi_Funds, 6 ) then _num_len_( 60 ) = max( _num_len_( 60 ), 7 ) ;
else if ixi_Funds ne trunc( ixi_Funds, 5 ) then _num_len_( 60 ) = max( _num_len_( 60 ), 6 ) ;
else if ixi_Funds ne trunc( ixi_Funds, 4 ) then _num_len_( 60 ) = max( _num_len_( 60 ), 5 ) ;
else if ixi_Funds ne trunc( ixi_Funds, 3 ) then _num_len_( 60 ) = max( _num_len_( 60 ), 4 ) ;
end ;
if ixi_MMS ne . then do ;
if ixi_MMS ne trunc( ixi_MMS, 7 ) then _num_len_( 61 ) = max( _num_len_( 61 ), 8 ) ;
else if ixi_MMS ne trunc( ixi_MMS, 6 ) then _num_len_( 61 ) = max( _num_len_( 61 ), 7 ) ;
else if ixi_MMS ne trunc( ixi_MMS, 5 ) then _num_len_( 61 ) = max( _num_len_( 61 ), 6 ) ;
else if ixi_MMS ne trunc( ixi_MMS, 4 ) then _num_len_( 61 ) = max( _num_len_( 61 ), 5 ) ;
else if ixi_MMS ne trunc( ixi_MMS, 3 ) then _num_len_( 61 ) = max( _num_len_( 61 ), 4 ) ;
end ;
if ixi_Non_Int_Chk ne . then do ;
if ixi_Non_Int_Chk ne trunc( ixi_Non_Int_Chk, 7 ) then _num_len_( 62 ) = max( _num_len_( 62 ), 8 ) ;
else if ixi_Non_Int_Chk ne trunc( ixi_Non_Int_Chk, 6 ) then _num_len_( 62 ) = max( _num_len_( 62 ), 7 ) ;
else if ixi_Non_Int_Chk ne trunc( ixi_Non_Int_Chk, 5 ) then _num_len_( 62 ) = max( _num_len_( 62 ), 6 ) ;
else if ixi_Non_Int_Chk ne trunc( ixi_Non_Int_Chk, 4 ) then _num_len_( 62 ) = max( _num_len_( 62 ), 5 ) ;
else if ixi_Non_Int_Chk ne trunc( ixi_Non_Int_Chk, 3 ) then _num_len_( 62 ) = max( _num_len_( 62 ), 4 ) ;
end ;
if ixi_Other ne . then do ;
if ixi_Other ne trunc( ixi_Other, 7 ) then _num_len_( 63 ) = max( _num_len_( 63 ), 8 ) ;
else if ixi_Other ne trunc( ixi_Other, 6 ) then _num_len_( 63 ) = max( _num_len_( 63 ), 7 ) ;
else if ixi_Other ne trunc( ixi_Other, 5 ) then _num_len_( 63 ) = max( _num_len_( 63 ), 6 ) ;
else if ixi_Other ne trunc( ixi_Other, 4 ) then _num_len_( 63 ) = max( _num_len_( 63 ), 5 ) ;
else if ixi_Other ne trunc( ixi_Other, 3 ) then _num_len_( 63 ) = max( _num_len_( 63 ), 4 ) ;
end ;
if ixi_Stocks ne . then do ;
if ixi_Stocks ne trunc( ixi_Stocks, 7 ) then _num_len_( 64 ) = max( _num_len_( 64 ), 8 ) ;
else if ixi_Stocks ne trunc( ixi_Stocks, 6 ) then _num_len_( 64 ) = max( _num_len_( 64 ), 7 ) ;
else if ixi_Stocks ne trunc( ixi_Stocks, 5 ) then _num_len_( 64 ) = max( _num_len_( 64 ), 6 ) ;
else if ixi_Stocks ne trunc( ixi_Stocks, 4 ) then _num_len_( 64 ) = max( _num_len_( 64 ), 5 ) ;
else if ixi_Stocks ne trunc( ixi_Stocks, 3 ) then _num_len_( 64 ) = max( _num_len_( 64 ), 4 ) ;
end ;
if ixi_int_chk ne . then do ;
if ixi_int_chk ne trunc( ixi_int_chk, 7 ) then _num_len_( 65 ) = max( _num_len_( 65 ), 8 ) ;
else if ixi_int_chk ne trunc( ixi_int_chk, 6 ) then _num_len_( 65 ) = max( _num_len_( 65 ), 7 ) ;
else if ixi_int_chk ne trunc( ixi_int_chk, 5 ) then _num_len_( 65 ) = max( _num_len_( 65 ), 6 ) ;
else if ixi_int_chk ne trunc( ixi_int_chk, 4 ) then _num_len_( 65 ) = max( _num_len_( 65 ), 5 ) ;
else if ixi_int_chk ne trunc( ixi_int_chk, 3 ) then _num_len_( 65 ) = max( _num_len_( 65 ), 4 ) ;
end ;
if ixi_savings ne . then do ;
if ixi_savings ne trunc( ixi_savings, 7 ) then _num_len_( 66 ) = max( _num_len_( 66 ), 8 ) ;
else if ixi_savings ne trunc( ixi_savings, 6 ) then _num_len_( 66 ) = max( _num_len_( 66 ), 7 ) ;
else if ixi_savings ne trunc( ixi_savings, 5 ) then _num_len_( 66 ) = max( _num_len_( 66 ), 6 ) ;
else if ixi_savings ne trunc( ixi_savings, 4 ) then _num_len_( 66 ) = max( _num_len_( 66 ), 5 ) ;
else if ixi_savings ne trunc( ixi_savings, 3 ) then _num_len_( 66 ) = max( _num_len_( 66 ), 4 ) ;
end ;
if ixi_tda ne . then do ;
if ixi_tda ne trunc( ixi_tda, 7 ) then _num_len_( 67 ) = max( _num_len_( 67 ), 8 ) ;
else if ixi_tda ne trunc( ixi_tda, 6 ) then _num_len_( 67 ) = max( _num_len_( 67 ), 7 ) ;
else if ixi_tda ne trunc( ixi_tda, 5 ) then _num_len_( 67 ) = max( _num_len_( 67 ), 6 ) ;
else if ixi_tda ne trunc( ixi_tda, 4 ) then _num_len_( 67 ) = max( _num_len_( 67 ), 5 ) ;
else if ixi_tda ne trunc( ixi_tda, 3 ) then _num_len_( 67 ) = max( _num_len_( 67 ), 4 ) ;
end ;
if mms ne . then do ;
if mms ne trunc( mms, 7 ) then _num_len_( 68 ) = max( _num_len_( 68 ), 8 ) ;
else if mms ne trunc( mms, 6 ) then _num_len_( 68 ) = max( _num_len_( 68 ), 7 ) ;
else if mms ne trunc( mms, 5 ) then _num_len_( 68 ) = max( _num_len_( 68 ), 6 ) ;
else if mms ne trunc( mms, 4 ) then _num_len_( 68 ) = max( _num_len_( 68 ), 5 ) ;
else if mms ne trunc( mms, 3 ) then _num_len_( 68 ) = max( _num_len_( 68 ), 4 ) ;
end ;
if mpos_amt ne . then do ;
if mpos_amt ne trunc( mpos_amt, 7 ) then _num_len_( 69 ) = max( _num_len_( 69 ), 8 ) ;
else if mpos_amt ne trunc( mpos_amt, 6 ) then _num_len_( 69 ) = max( _num_len_( 69 ), 7 ) ;
else if mpos_amt ne trunc( mpos_amt, 5 ) then _num_len_( 69 ) = max( _num_len_( 69 ), 6 ) ;
else if mpos_amt ne trunc( mpos_amt, 4 ) then _num_len_( 69 ) = max( _num_len_( 69 ), 5 ) ;
else if mpos_amt ne trunc( mpos_amt, 3 ) then _num_len_( 69 ) = max( _num_len_( 69 ), 4 ) ;
end ;
if mpos_num ne . then do ;
if mpos_num ne trunc( mpos_num, 7 ) then _num_len_( 70 ) = max( _num_len_( 70 ), 8 ) ;
else if mpos_num ne trunc( mpos_num, 6 ) then _num_len_( 70 ) = max( _num_len_( 70 ), 7 ) ;
else if mpos_num ne trunc( mpos_num, 5 ) then _num_len_( 70 ) = max( _num_len_( 70 ), 6 ) ;
else if mpos_num ne trunc( mpos_num, 4 ) then _num_len_( 70 ) = max( _num_len_( 70 ), 5 ) ;
else if mpos_num ne trunc( mpos_num, 3 ) then _num_len_( 70 ) = max( _num_len_( 70 ), 4 ) ;
end ;
if mtg ne . then do ;
if mtg ne trunc( mtg, 7 ) then _num_len_( 71 ) = max( _num_len_( 71 ), 8 ) ;
else if mtg ne trunc( mtg, 6 ) then _num_len_( 71 ) = max( _num_len_( 71 ), 7 ) ;
else if mtg ne trunc( mtg, 5 ) then _num_len_( 71 ) = max( _num_len_( 71 ), 6 ) ;
else if mtg ne trunc( mtg, 4 ) then _num_len_( 71 ) = max( _num_len_( 71 ), 5 ) ;
else if mtg ne trunc( mtg, 3 ) then _num_len_( 71 ) = max( _num_len_( 71 ), 4 ) ;
end ;
if sav ne . then do ;
if sav ne trunc( sav, 7 ) then _num_len_( 72 ) = max( _num_len_( 72 ), 8 ) ;
else if sav ne trunc( sav, 6 ) then _num_len_( 72 ) = max( _num_len_( 72 ), 7 ) ;
else if sav ne trunc( sav, 5 ) then _num_len_( 72 ) = max( _num_len_( 72 ), 6 ) ;
else if sav ne trunc( sav, 4 ) then _num_len_( 72 ) = max( _num_len_( 72 ), 5 ) ;
else if sav ne trunc( sav, 3 ) then _num_len_( 72 ) = max( _num_len_( 72 ), 4 ) ;
end ;
if sav_amt ne . then do ;
if sav_amt ne trunc( sav_amt, 7 ) then _num_len_( 73 ) = max( _num_len_( 73 ), 8 ) ;
else if sav_amt ne trunc( sav_amt, 6 ) then _num_len_( 73 ) = max( _num_len_( 73 ), 7 ) ;
else if sav_amt ne trunc( sav_amt, 5 ) then _num_len_( 73 ) = max( _num_len_( 73 ), 6 ) ;
else if sav_amt ne trunc( sav_amt, 4 ) then _num_len_( 73 ) = max( _num_len_( 73 ), 5 ) ;
else if sav_amt ne trunc( sav_amt, 3 ) then _num_len_( 73 ) = max( _num_len_( 73 ), 4 ) ;
end ;
if sdb ne . then do ;
if sdb ne trunc( sdb, 7 ) then _num_len_( 74 ) = max( _num_len_( 74 ), 8 ) ;
else if sdb ne trunc( sdb, 6 ) then _num_len_( 74 ) = max( _num_len_( 74 ), 7 ) ;
else if sdb ne trunc( sdb, 5 ) then _num_len_( 74 ) = max( _num_len_( 74 ), 6 ) ;
else if sdb ne trunc( sdb, 4 ) then _num_len_( 74 ) = max( _num_len_( 74 ), 5 ) ;
else if sdb ne trunc( sdb, 3 ) then _num_len_( 74 ) = max( _num_len_( 74 ), 4 ) ;
end ;
if sec ne . then do ;
if sec ne trunc( sec, 7 ) then _num_len_( 75 ) = max( _num_len_( 75 ), 8 ) ;
else if sec ne trunc( sec, 6 ) then _num_len_( 75 ) = max( _num_len_( 75 ), 7 ) ;
else if sec ne trunc( sec, 5 ) then _num_len_( 75 ) = max( _num_len_( 75 ), 6 ) ;
else if sec ne trunc( sec, 4 ) then _num_len_( 75 ) = max( _num_len_( 75 ), 5 ) ;
else if sec ne trunc( sec, 3 ) then _num_len_( 75 ) = max( _num_len_( 75 ), 4 ) ;
end ;
if sec_Amt ne . then do ;
if sec_Amt ne trunc( sec_Amt, 7 ) then _num_len_( 76 ) = max( _num_len_( 76 ), 8 ) ;
else if sec_Amt ne trunc( sec_Amt, 6 ) then _num_len_( 76 ) = max( _num_len_( 76 ), 7 ) ;
else if sec_Amt ne trunc( sec_Amt, 5 ) then _num_len_( 76 ) = max( _num_len_( 76 ), 6 ) ;
else if sec_Amt ne trunc( sec_Amt, 4 ) then _num_len_( 76 ) = max( _num_len_( 76 ), 5 ) ;
else if sec_Amt ne trunc( sec_Amt, 3 ) then _num_len_( 76 ) = max( _num_len_( 76 ), 4 ) ;
end ;
if segment ne . then do ;
if segment ne trunc( segment, 7 ) then _num_len_( 77 ) = max( _num_len_( 77 ), 8 ) ;
else if segment ne trunc( segment, 6 ) then _num_len_( 77 ) = max( _num_len_( 77 ), 7 ) ;
else if segment ne trunc( segment, 5 ) then _num_len_( 77 ) = max( _num_len_( 77 ), 6 ) ;
else if segment ne trunc( segment, 4 ) then _num_len_( 77 ) = max( _num_len_( 77 ), 5 ) ;
else if segment ne trunc( segment, 3 ) then _num_len_( 77 ) = max( _num_len_( 77 ), 4 ) ;
end ;
if sln ne . then do ;
if sln ne trunc( sln, 7 ) then _num_len_( 78 ) = max( _num_len_( 78 ), 8 ) ;
else if sln ne trunc( sln, 6 ) then _num_len_( 78 ) = max( _num_len_( 78 ), 7 ) ;
else if sln ne trunc( sln, 5 ) then _num_len_( 78 ) = max( _num_len_( 78 ), 6 ) ;
else if sln ne trunc( sln, 4 ) then _num_len_( 78 ) = max( _num_len_( 78 ), 5 ) ;
else if sln ne trunc( sln, 3 ) then _num_len_( 78 ) = max( _num_len_( 78 ), 4 ) ;
end ;
if sln_amt ne . then do ;
if sln_amt ne trunc( sln_amt, 7 ) then _num_len_( 79 ) = max( _num_len_( 79 ), 8 ) ;
else if sln_amt ne trunc( sln_amt, 6 ) then _num_len_( 79 ) = max( _num_len_( 79 ), 7 ) ;
else if sln_amt ne trunc( sln_amt, 5 ) then _num_len_( 79 ) = max( _num_len_( 79 ), 6 ) ;
else if sln_amt ne trunc( sln_amt, 4 ) then _num_len_( 79 ) = max( _num_len_( 79 ), 5 ) ;
else if sln_amt ne trunc( sln_amt, 3 ) then _num_len_( 79 ) = max( _num_len_( 79 ), 4 ) ;
end ;
if tda ne . then do ;
if tda ne trunc( tda, 7 ) then _num_len_( 80 ) = max( _num_len_( 80 ), 8 ) ;
else if tda ne trunc( tda, 6 ) then _num_len_( 80 ) = max( _num_len_( 80 ), 7 ) ;
else if tda ne trunc( tda, 5 ) then _num_len_( 80 ) = max( _num_len_( 80 ), 6 ) ;
else if tda ne trunc( tda, 4 ) then _num_len_( 80 ) = max( _num_len_( 80 ), 5 ) ;
else if tda ne trunc( tda, 3 ) then _num_len_( 80 ) = max( _num_len_( 80 ), 4 ) ;
end ;
if tenure ne . then do ;
if tenure ne trunc( tenure, 7 ) then _num_len_( 81 ) = max( _num_len_( 81 ), 8 ) ;
else if tenure ne trunc( tenure, 6 ) then _num_len_( 81 ) = max( _num_len_( 81 ), 7 ) ;
else if tenure ne trunc( tenure, 5 ) then _num_len_( 81 ) = max( _num_len_( 81 ), 6 ) ;
else if tenure ne trunc( tenure, 4 ) then _num_len_( 81 ) = max( _num_len_( 81 ), 5 ) ;
else if tenure ne trunc( tenure, 3 ) then _num_len_( 81 ) = max( _num_len_( 81 ), 4 ) ;
end ;
if tenure_yr ne . then do ;
if tenure_yr ne trunc( tenure_yr, 7 ) then _num_len_( 82 ) = max( _num_len_( 82 ), 8 ) ;
else if tenure_yr ne trunc( tenure_yr, 6 ) then _num_len_( 82 ) = max( _num_len_( 82 ), 7 ) ;
else if tenure_yr ne trunc( tenure_yr, 5 ) then _num_len_( 82 ) = max( _num_len_( 82 ), 6 ) ;
else if tenure_yr ne trunc( tenure_yr, 4 ) then _num_len_( 82 ) = max( _num_len_( 82 ), 5 ) ;
else if tenure_yr ne trunc( tenure_yr, 3 ) then _num_len_( 82 ) = max( _num_len_( 82 ), 4 ) ;
end ;
if trs ne . then do ;
if trs ne trunc( trs, 7 ) then _num_len_( 83 ) = max( _num_len_( 83 ), 8 ) ;
else if trs ne trunc( trs, 6 ) then _num_len_( 83 ) = max( _num_len_( 83 ), 7 ) ;
else if trs ne trunc( trs, 5 ) then _num_len_( 83 ) = max( _num_len_( 83 ), 6 ) ;
else if trs ne trunc( trs, 4 ) then _num_len_( 83 ) = max( _num_len_( 83 ), 5 ) ;
else if trs ne trunc( trs, 3 ) then _num_len_( 83 ) = max( _num_len_( 83 ), 4 ) ;
end ;
if trs_amt ne . then do ;
if trs_amt ne trunc( trs_amt, 7 ) then _num_len_( 84 ) = max( _num_len_( 84 ), 8 ) ;
else if trs_amt ne trunc( trs_amt, 6 ) then _num_len_( 84 ) = max( _num_len_( 84 ), 7 ) ;
else if trs_amt ne trunc( trs_amt, 5 ) then _num_len_( 84 ) = max( _num_len_( 84 ), 6 ) ;
else if trs_amt ne trunc( trs_amt, 4 ) then _num_len_( 84 ) = max( _num_len_( 84 ), 5 ) ;
else if trs_amt ne trunc( trs_amt, 3 ) then _num_len_( 84 ) = max( _num_len_( 84 ), 4 ) ;
end ;
if vpos_num ne . then do ;
if vpos_num ne trunc( vpos_num, 7 ) then _num_len_( 85 ) = max( _num_len_( 85 ), 8 ) ;
else if vpos_num ne trunc( vpos_num, 6 ) then _num_len_( 85 ) = max( _num_len_( 85 ), 7 ) ;
else if vpos_num ne trunc( vpos_num, 5 ) then _num_len_( 85 ) = max( _num_len_( 85 ), 6 ) ;
else if vpos_num ne trunc( vpos_num, 4 ) then _num_len_( 85 ) = max( _num_len_( 85 ), 5 ) ;
else if vpos_num ne trunc( vpos_num, 3 ) then _num_len_( 85 ) = max( _num_len_( 85 ), 4 ) ;
end ;
if web ne . then do ;
if web ne trunc( web, 7 ) then _num_len_( 86 ) = max( _num_len_( 86 ), 8 ) ;
else if web ne trunc( web, 6 ) then _num_len_( 86 ) = max( _num_len_( 86 ), 7 ) ;
else if web ne trunc( web, 5 ) then _num_len_( 86 ) = max( _num_len_( 86 ), 6 ) ;
else if web ne trunc( web, 4 ) then _num_len_( 86 ) = max( _num_len_( 86 ), 5 ) ;
else if web ne trunc( web, 3 ) then _num_len_( 86 ) = max( _num_len_( 86 ), 4 ) ;
end ;
if web_signon ne . then do ;
if web_signon ne trunc( web_signon, 7 ) then _num_len_( 87 ) = max( _num_len_( 87 ), 8 ) ;
else if web_signon ne trunc( web_signon, 6 ) then _num_len_( 87 ) = max( _num_len_( 87 ), 7 ) ;
else if web_signon ne trunc( web_signon, 5 ) then _num_len_( 87 ) = max( _num_len_( 87 ), 6 ) ;
else if web_signon ne trunc( web_signon, 4 ) then _num_len_( 87 ) = max( _num_len_( 87 ), 5 ) ;
else if web_signon ne trunc( web_signon, 3 ) then _num_len_( 87 ) = max( _num_len_( 87 ), 4 ) ;
end ;
if lastobs then do ;
call symput( "CHARLEN1", put( _char_len_( 1 ), 5. )) ;
call symput( "CHARLEN2", put( _char_len_( 2 ), 5. )) ;
call symput( "CHARLEN3", put( _char_len_( 3 ), 5. )) ;
call symput( "CHARLEN4", put( _char_len_( 4 ), 5. )) ;
call symput( "CHARLEN5", put( _char_len_( 5 ), 5. )) ;
call symput( "CHARLEN6", put( _char_len_( 6 ), 5. )) ;
call symput( "CHARLEN7", put( _char_len_( 7 ), 5. )) ;
call symput( "CHARLEN8", put( _char_len_( 8 ), 5. )) ;
call symput( "CHARLEN9", put( _char_len_( 9 ), 5. )) ;
call symput( "NUMLEN1", put( _num_len_( 1 ), 1. )) ;
call symput( "NUMLEN2", put( _num_len_( 2 ), 1. )) ;
call symput( "NUMLEN3", put( _num_len_( 3 ), 1. )) ;
call symput( "NUMLEN4", put( _num_len_( 4 ), 1. )) ;
call symput( "NUMLEN5", put( _num_len_( 5 ), 1. )) ;
call symput( "NUMLEN6", put( _num_len_( 6 ), 1. )) ;
call symput( "NUMLEN7", put( _num_len_( 7 ), 1. )) ;
call symput( "NUMLEN8", put( _num_len_( 8 ), 1. )) ;
call symput( "NUMLEN9", put( _num_len_( 9 ), 1. )) ;
call symput( "NUMLEN10", put( _num_len_( 10 ), 1. )) ;
call symput( "NUMLEN11", put( _num_len_( 11 ), 1. )) ;
call symput( "NUMLEN12", put( _num_len_( 12 ), 1. )) ;
call symput( "NUMLEN13", put( _num_len_( 13 ), 1. )) ;
call symput( "NUMLEN14", put( _num_len_( 14 ), 1. )) ;
call symput( "NUMLEN15", put( _num_len_( 15 ), 1. )) ;
call symput( "NUMLEN16", put( _num_len_( 16 ), 1. )) ;
call symput( "NUMLEN17", put( _num_len_( 17 ), 1. )) ;
call symput( "NUMLEN18", put( _num_len_( 18 ), 1. )) ;
call symput( "NUMLEN19", put( _num_len_( 19 ), 1. )) ;
call symput( "NUMLEN20", put( _num_len_( 20 ), 1. )) ;
call symput( "NUMLEN21", put( _num_len_( 21 ), 1. )) ;
call symput( "NUMLEN22", put( _num_len_( 22 ), 1. )) ;
call symput( "NUMLEN23", put( _num_len_( 23 ), 1. )) ;
call symput( "NUMLEN24", put( _num_len_( 24 ), 1. )) ;
call symput( "NUMLEN25", put( _num_len_( 25 ), 1. )) ;
call symput( "NUMLEN26", put( _num_len_( 26 ), 1. )) ;
call symput( "NUMLEN27", put( _num_len_( 27 ), 1. )) ;
call symput( "NUMLEN28", put( _num_len_( 28 ), 1. )) ;
call symput( "NUMLEN29", put( _num_len_( 29 ), 1. )) ;
call symput( "NUMLEN30", put( _num_len_( 30 ), 1. )) ;
call symput( "NUMLEN31", put( _num_len_( 31 ), 1. )) ;
call symput( "NUMLEN32", put( _num_len_( 32 ), 1. )) ;
call symput( "NUMLEN33", put( _num_len_( 33 ), 1. )) ;
call symput( "NUMLEN34", put( _num_len_( 34 ), 1. )) ;
call symput( "NUMLEN35", put( _num_len_( 35 ), 1. )) ;
call symput( "NUMLEN36", put( _num_len_( 36 ), 1. )) ;
call symput( "NUMLEN37", put( _num_len_( 37 ), 1. )) ;
call symput( "NUMLEN38", put( _num_len_( 38 ), 1. )) ;
call symput( "NUMLEN39", put( _num_len_( 39 ), 1. )) ;
call symput( "NUMLEN40", put( _num_len_( 40 ), 1. )) ;
call symput( "NUMLEN41", put( _num_len_( 41 ), 1. )) ;
call symput( "NUMLEN42", put( _num_len_( 42 ), 1. )) ;
call symput( "NUMLEN43", put( _num_len_( 43 ), 1. )) ;
call symput( "NUMLEN44", put( _num_len_( 44 ), 1. )) ;
call symput( "NUMLEN45", put( _num_len_( 45 ), 1. )) ;
call symput( "NUMLEN46", put( _num_len_( 46 ), 1. )) ;
call symput( "NUMLEN47", put( _num_len_( 47 ), 1. )) ;
call symput( "NUMLEN48", put( _num_len_( 48 ), 1. )) ;
call symput( "NUMLEN49", put( _num_len_( 49 ), 1. )) ;
call symput( "NUMLEN50", put( _num_len_( 50 ), 1. )) ;
call symput( "NUMLEN51", put( _num_len_( 51 ), 1. )) ;
call symput( "NUMLEN52", put( _num_len_( 52 ), 1. )) ;
call symput( "NUMLEN53", put( _num_len_( 53 ), 1. )) ;
call symput( "NUMLEN54", put( _num_len_( 54 ), 1. )) ;
call symput( "NUMLEN55", put( _num_len_( 55 ), 1. )) ;
call symput( "NUMLEN56", put( _num_len_( 56 ), 1. )) ;
call symput( "NUMLEN57", put( _num_len_( 57 ), 1. )) ;
call symput( "NUMLEN58", put( _num_len_( 58 ), 1. )) ;
call symput( "NUMLEN59", put( _num_len_( 59 ), 1. )) ;
call symput( "NUMLEN60", put( _num_len_( 60 ), 1. )) ;
call symput( "NUMLEN61", put( _num_len_( 61 ), 1. )) ;
call symput( "NUMLEN62", put( _num_len_( 62 ), 1. )) ;
call symput( "NUMLEN63", put( _num_len_( 63 ), 1. )) ;
call symput( "NUMLEN64", put( _num_len_( 64 ), 1. )) ;
call symput( "NUMLEN65", put( _num_len_( 65 ), 1. )) ;
call symput( "NUMLEN66", put( _num_len_( 66 ), 1. )) ;
call symput( "NUMLEN67", put( _num_len_( 67 ), 1. )) ;
call symput( "NUMLEN68", put( _num_len_( 68 ), 1. )) ;
call symput( "NUMLEN69", put( _num_len_( 69 ), 1. )) ;
call symput( "NUMLEN70", put( _num_len_( 70 ), 1. )) ;
call symput( "NUMLEN71", put( _num_len_( 71 ), 1. )) ;
call symput( "NUMLEN72", put( _num_len_( 72 ), 1. )) ;
call symput( "NUMLEN73", put( _num_len_( 73 ), 1. )) ;
call symput( "NUMLEN74", put( _num_len_( 74 ), 1. )) ;
call symput( "NUMLEN75", put( _num_len_( 75 ), 1. )) ;
call symput( "NUMLEN76", put( _num_len_( 76 ), 1. )) ;
call symput( "NUMLEN77", put( _num_len_( 77 ), 1. )) ;
call symput( "NUMLEN78", put( _num_len_( 78 ), 1. )) ;
call symput( "NUMLEN79", put( _num_len_( 79 ), 1. )) ;
call symput( "NUMLEN80", put( _num_len_( 80 ), 1. )) ;
call symput( "NUMLEN81", put( _num_len_( 81 ), 1. )) ;
call symput( "NUMLEN82", put( _num_len_( 82 ), 1. )) ;
call symput( "NUMLEN83", put( _num_len_( 83 ), 1. )) ;
call symput( "NUMLEN84", put( _num_len_( 84 ), 1. )) ;
call symput( "NUMLEN85", put( _num_len_( 85 ), 1. )) ;
call symput( "NUMLEN86", put( _num_len_( 86 ), 1. )) ;
call symput( "NUMLEN87", put( _num_len_( 87 ), 1. )) ;
end ;
run ;
proc datasets nolist ;
delete _cntnts_ ;
run ;
data _null_ ;
length retain $32767 ;
retain retain 'retain ' ;
dsid = open( "data.main_201209", 'I' ) ;
do _i_ = 1 to attrn( dsid, 'nvars' ) ;
retain = trim( retain ) || ' ' || varname( dsid, _i_ ) ;
end ;
call symput( 'RETAIN', retain ) ;
run ;
data data.main_201209_new ;
retain HHID STATE ZIP RM BRANCH CBR MARKET dda mms sav tda ira sec trs mtg heq card ILN sln sdb ins bus com DDA_Amt MMS_amt sav_amt TDA_Amt IRA_amt sec_Amt trs_amt MTG_amt HEQ_Amt ccs_Amt iln_amt sln_amt IXI_tot IXi_Annuity ixi_Bonds ixi_Funds ixi_Stocks
ixi_Other ixi_Non_Int_Chk ixi_int_chk ixi_savings ixi_MMS ixi_tda source WAS WFO segment clv_total clv_rem clv_rem_ten cqi_bp cqi_DD cqi_deb cqi_odl cqi_web web VPOS_AMT vpos_num mpos_amt mpos_num ATMO_AMT ATMO_NUM ATMT_AMT ATMT_NUM web_signon BP_NUM
BP_AMT BR_TR_NUM BR_TR_amt VRU_NUM SMS_NUM WAP_NUM fico_num bp WAP SMS edeliv estat fico FWorks fworks_num band band_yr IND IND_AMT chk_num dd_amt distance tenure tran_code tenure_yr hh grp ;
LENGTH BRANCH $5 HHID $9 RM $1 STATE $2 ZIP $5 band $1 band_yr $1 source $7 tran_code $1 ;
LENGTH ATMO_AMT 8 ATMO_NUM 3 ATMT_AMT 8 ATMT_NUM 3 BP_AMT 8 BP_NUM 3 BR_TR_NUM 3 BR_TR_amt 8 CBR 3 DDA_Amt 8 FWorks 3 HEQ_Amt 8 ILN 3 IND 3 IND_AMT 8 IRA_amt 8 IXI_tot 5 IXi_Annuity 5 MARKET 3 MMS_amt 8 MTG_amt 8 SMS 3 SMS_NUM 3 TDA_Amt 8 VPOS_AMT 8
VRU_NUM 3 WAP 3 WAP_NUM 4 WAS 3 WFO 3 bp 3 bus 3 card 3 ccs_Amt 8 chk_num 3 clv_rem 8 clv_rem_ten 3 clv_total 8 com 3 cqi_DD 3 cqi_bp 3 cqi_deb 3 cqi_odl 3 cqi_web 3 dd_amt 8 dda 3 distance 8 edeliv 3 estat 3 fico 3 fico_num 3 fworks_num 3 grp 3 heq 3 hh
3 iln_amt 8 ins 3 ira 3 ixi_Bonds 5 ixi_Funds 5 ixi_MMS 5 ixi_Non_Int_Chk 5 ixi_Other 5 ixi_Stocks 5 ixi_int_chk 5 ixi_savings 5 ixi_tda 5 mms 3 mpos_amt 8 mpos_num 3 mtg 3 sav 3 sav_amt 8 sdb 3 sec 3 sec_Amt 8 segment 3 sln 3 sln_amt 8 tda 3 tenure 4
tenure_yr 8 trs 3 trs_amt 6 vpos_num 3 web 3 web_signon 3 ;
FORMAT BRANCH $5. HHID $9. RM $1. STATE $2. ZIP $5. band $1. band_yr $1. source $7. tran_code $1. ;
set data.main_201209 ;
run ;
options compress=yes;
proc datasets library=data;
delete main_201209;
change main_201209_new=main_201209;
run;
proc contents data=data.contrib_201209( drop= ) memtype=data noprint out=_cntnts_( keep= name type ) ;
run ;
data _null_ ;
set _cntnts_ end=lastobs nobs=nobs ;
if nobs = 0 then stop ;
n_char + ( type = 2 ) ;
n_num + ( type = 1 ) ;
if lastobs then do ;
call symput( 'N_CHAR', left( put( n_char, 5. ))) ;
call symput( 'N_NUM' , left( put( n_num , 5. ))) ;
end ;
run ;
proc sql noprint ;
select name into :CHAR1 - :CHAR6 from _cntnts_ where type = 2 ;
select name into :NUM1 - :NUM15 from _cntnts_ where type = 1 ;
quit ;
data _null_ ;
set data.contrib_201209 end=lastobs ;
array _num_len_ ( 15 ) 3 _temporary_ ;
array _char_len_ ( 6 ) _temporary_ ;
if _n_ = 1 then do ;
do i = 1 to 6 ;
_char_len_( i ) = 0 ;
end ;
do i = 1 to 15 ;
_num_len_ ( i ) = 3 ;
end ;
end ;
_char_len_( 1 ) = max( _char_len_( 1 ), length( BRANCH )) ;
_char_len_( 2 ) = max( _char_len_( 2 ), length( HHID )) ;
_char_len_( 3 ) = max( _char_len_( 3 ), length( STATE )) ;
_char_len_( 4 ) = max( _char_len_( 4 ), length( ZIP )) ;
_char_len_( 5 ) = max( _char_len_( 5 ), length( band )) ;
_char_len_( 6 ) = max( _char_len_( 6 ), length( band_yr )) ;
if CBR ne . then do ;
if CBR ne trunc( CBR, 7 ) then _num_len_( 1 ) = max( _num_len_( 1 ), 8 ) ;
else if CBR ne trunc( CBR, 6 ) then _num_len_( 1 ) = max( _num_len_( 1 ), 7 ) ;
else if CBR ne trunc( CBR, 5 ) then _num_len_( 1 ) = max( _num_len_( 1 ), 6 ) ;
else if CBR ne trunc( CBR, 4 ) then _num_len_( 1 ) = max( _num_len_( 1 ), 5 ) ;
else if CBR ne trunc( CBR, 3 ) then _num_len_( 1 ) = max( _num_len_( 1 ), 4 ) ;
end ;
if DDA_CON ne . then do ;
if DDA_CON ne trunc( DDA_CON, 7 ) then _num_len_( 2 ) = max( _num_len_( 2 ), 8 ) ;
else if DDA_CON ne trunc( DDA_CON, 6 ) then _num_len_( 2 ) = max( _num_len_( 2 ), 7 ) ;
else if DDA_CON ne trunc( DDA_CON, 5 ) then _num_len_( 2 ) = max( _num_len_( 2 ), 6 ) ;
else if DDA_CON ne trunc( DDA_CON, 4 ) then _num_len_( 2 ) = max( _num_len_( 2 ), 5 ) ;
else if DDA_CON ne trunc( DDA_CON, 3 ) then _num_len_( 2 ) = max( _num_len_( 2 ), 4 ) ;
end ;
if ILN_CON ne . then do ;
if ILN_CON ne trunc( ILN_CON, 7 ) then _num_len_( 3 ) = max( _num_len_( 3 ), 8 ) ;
else if ILN_CON ne trunc( ILN_CON, 6 ) then _num_len_( 3 ) = max( _num_len_( 3 ), 7 ) ;
else if ILN_CON ne trunc( ILN_CON, 5 ) then _num_len_( 3 ) = max( _num_len_( 3 ), 6 ) ;
else if ILN_CON ne trunc( ILN_CON, 4 ) then _num_len_( 3 ) = max( _num_len_( 3 ), 5 ) ;
else if ILN_CON ne trunc( ILN_CON, 3 ) then _num_len_( 3 ) = max( _num_len_( 3 ), 4 ) ;
end ;
if IND_con ne . then do ;
if IND_con ne trunc( IND_con, 7 ) then _num_len_( 4 ) = max( _num_len_( 4 ), 8 ) ;
else if IND_con ne trunc( IND_con, 6 ) then _num_len_( 4 ) = max( _num_len_( 4 ), 7 ) ;
else if IND_con ne trunc( IND_con, 5 ) then _num_len_( 4 ) = max( _num_len_( 4 ), 6 ) ;
else if IND_con ne trunc( IND_con, 4 ) then _num_len_( 4 ) = max( _num_len_( 4 ), 5 ) ;
else if IND_con ne trunc( IND_con, 3 ) then _num_len_( 4 ) = max( _num_len_( 4 ), 4 ) ;
end ;
if IRA_CON ne . then do ;
if IRA_CON ne trunc( IRA_CON, 7 ) then _num_len_( 5 ) = max( _num_len_( 5 ), 8 ) ;
else if IRA_CON ne trunc( IRA_CON, 6 ) then _num_len_( 5 ) = max( _num_len_( 5 ), 7 ) ;
else if IRA_CON ne trunc( IRA_CON, 5 ) then _num_len_( 5 ) = max( _num_len_( 5 ), 6 ) ;
else if IRA_CON ne trunc( IRA_CON, 4 ) then _num_len_( 5 ) = max( _num_len_( 5 ), 5 ) ;
else if IRA_CON ne trunc( IRA_CON, 3 ) then _num_len_( 5 ) = max( _num_len_( 5 ), 4 ) ;
end ;
if MARKET ne . then do ;
if MARKET ne trunc( MARKET, 7 ) then _num_len_( 6 ) = max( _num_len_( 6 ), 8 ) ;
else if MARKET ne trunc( MARKET, 6 ) then _num_len_( 6 ) = max( _num_len_( 6 ), 7 ) ;
else if MARKET ne trunc( MARKET, 5 ) then _num_len_( 6 ) = max( _num_len_( 6 ), 6 ) ;
else if MARKET ne trunc( MARKET, 4 ) then _num_len_( 6 ) = max( _num_len_( 6 ), 5 ) ;
else if MARKET ne trunc( MARKET, 3 ) then _num_len_( 6 ) = max( _num_len_( 6 ), 4 ) ;
end ;
if MMS_CON ne . then do ;
if MMS_CON ne trunc( MMS_CON, 7 ) then _num_len_( 7 ) = max( _num_len_( 7 ), 8 ) ;
else if MMS_CON ne trunc( MMS_CON, 6 ) then _num_len_( 7 ) = max( _num_len_( 7 ), 7 ) ;
else if MMS_CON ne trunc( MMS_CON, 5 ) then _num_len_( 7 ) = max( _num_len_( 7 ), 6 ) ;
else if MMS_CON ne trunc( MMS_CON, 4 ) then _num_len_( 7 ) = max( _num_len_( 7 ), 5 ) ;
else if MMS_CON ne trunc( MMS_CON, 3 ) then _num_len_( 7 ) = max( _num_len_( 7 ), 4 ) ;
end ;
if SAV_CON ne . then do ;
if SAV_CON ne trunc( SAV_CON, 7 ) then _num_len_( 8 ) = max( _num_len_( 8 ), 8 ) ;
else if SAV_CON ne trunc( SAV_CON, 6 ) then _num_len_( 8 ) = max( _num_len_( 8 ), 7 ) ;
else if SAV_CON ne trunc( SAV_CON, 5 ) then _num_len_( 8 ) = max( _num_len_( 8 ), 6 ) ;
else if SAV_CON ne trunc( SAV_CON, 4 ) then _num_len_( 8 ) = max( _num_len_( 8 ), 5 ) ;
else if SAV_CON ne trunc( SAV_CON, 3 ) then _num_len_( 8 ) = max( _num_len_( 8 ), 4 ) ;
end ;
if SEC_CON ne . then do ;
if SEC_CON ne trunc( SEC_CON, 7 ) then _num_len_( 9 ) = max( _num_len_( 9 ), 8 ) ;
else if SEC_CON ne trunc( SEC_CON, 6 ) then _num_len_( 9 ) = max( _num_len_( 9 ), 7 ) ;
else if SEC_CON ne trunc( SEC_CON, 5 ) then _num_len_( 9 ) = max( _num_len_( 9 ), 6 ) ;
else if SEC_CON ne trunc( SEC_CON, 4 ) then _num_len_( 9 ) = max( _num_len_( 9 ), 5 ) ;
else if SEC_CON ne trunc( SEC_CON, 3 ) then _num_len_( 9 ) = max( _num_len_( 9 ), 4 ) ;
end ;
if SLN_CON ne . then do ;
if SLN_CON ne trunc( SLN_CON, 7 ) then _num_len_( 10 ) = max( _num_len_( 10 ), 8 ) ;
else if SLN_CON ne trunc( SLN_CON, 6 ) then _num_len_( 10 ) = max( _num_len_( 10 ), 7 ) ;
else if SLN_CON ne trunc( SLN_CON, 5 ) then _num_len_( 10 ) = max( _num_len_( 10 ), 6 ) ;
else if SLN_CON ne trunc( SLN_CON, 4 ) then _num_len_( 10 ) = max( _num_len_( 10 ), 5 ) ;
else if SLN_CON ne trunc( SLN_CON, 3 ) then _num_len_( 10 ) = max( _num_len_( 10 ), 4 ) ;
end ;
if TDA_CON ne . then do ;
if TDA_CON ne trunc( TDA_CON, 7 ) then _num_len_( 11 ) = max( _num_len_( 11 ), 8 ) ;
else if TDA_CON ne trunc( TDA_CON, 6 ) then _num_len_( 11 ) = max( _num_len_( 11 ), 7 ) ;
else if TDA_CON ne trunc( TDA_CON, 5 ) then _num_len_( 11 ) = max( _num_len_( 11 ), 6 ) ;
else if TDA_CON ne trunc( TDA_CON, 4 ) then _num_len_( 11 ) = max( _num_len_( 11 ), 5 ) ;
else if TDA_CON ne trunc( TDA_CON, 3 ) then _num_len_( 11 ) = max( _num_len_( 11 ), 4 ) ;
end ;
if TRS_CON ne . then do ;
if TRS_CON ne trunc( TRS_CON, 7 ) then _num_len_( 12 ) = max( _num_len_( 12 ), 8 ) ;
else if TRS_CON ne trunc( TRS_CON, 6 ) then _num_len_( 12 ) = max( _num_len_( 12 ), 7 ) ;
else if TRS_CON ne trunc( TRS_CON, 5 ) then _num_len_( 12 ) = max( _num_len_( 12 ), 6 ) ;
else if TRS_CON ne trunc( TRS_CON, 4 ) then _num_len_( 12 ) = max( _num_len_( 12 ), 5 ) ;
else if TRS_CON ne trunc( TRS_CON, 3 ) then _num_len_( 12 ) = max( _num_len_( 12 ), 4 ) ;
end ;
if card_con ne . then do ;
if card_con ne trunc( card_con, 7 ) then _num_len_( 13 ) = max( _num_len_( 13 ), 8 ) ;
else if card_con ne trunc( card_con, 6 ) then _num_len_( 13 ) = max( _num_len_( 13 ), 7 ) ;
else if card_con ne trunc( card_con, 5 ) then _num_len_( 13 ) = max( _num_len_( 13 ), 6 ) ;
else if card_con ne trunc( card_con, 4 ) then _num_len_( 13 ) = max( _num_len_( 13 ), 5 ) ;
else if card_con ne trunc( card_con, 3 ) then _num_len_( 13 ) = max( _num_len_( 13 ), 4 ) ;
end ;
if heq_con ne . then do ;
if heq_con ne trunc( heq_con, 7 ) then _num_len_( 14 ) = max( _num_len_( 14 ), 8 ) ;
else if heq_con ne trunc( heq_con, 6 ) then _num_len_( 14 ) = max( _num_len_( 14 ), 7 ) ;
else if heq_con ne trunc( heq_con, 5 ) then _num_len_( 14 ) = max( _num_len_( 14 ), 6 ) ;
else if heq_con ne trunc( heq_con, 4 ) then _num_len_( 14 ) = max( _num_len_( 14 ), 5 ) ;
else if heq_con ne trunc( heq_con, 3 ) then _num_len_( 14 ) = max( _num_len_( 14 ), 4 ) ;
end ;
if mtg_con ne . then do ;
if mtg_con ne trunc( mtg_con, 7 ) then _num_len_( 15 ) = max( _num_len_( 15 ), 8 ) ;
else if mtg_con ne trunc( mtg_con, 6 ) then _num_len_( 15 ) = max( _num_len_( 15 ), 7 ) ;
else if mtg_con ne trunc( mtg_con, 5 ) then _num_len_( 15 ) = max( _num_len_( 15 ), 6 ) ;
else if mtg_con ne trunc( mtg_con, 4 ) then _num_len_( 15 ) = max( _num_len_( 15 ), 5 ) ;
else if mtg_con ne trunc( mtg_con, 3 ) then _num_len_( 15 ) = max( _num_len_( 15 ), 4 ) ;
end ;
if lastobs then do ;
call symput( "CHARLEN1", put( _char_len_( 1 ), 5. )) ;
call symput( "CHARLEN2", put( _char_len_( 2 ), 5. )) ;
call symput( "CHARLEN3", put( _char_len_( 3 ), 5. )) ;
call symput( "CHARLEN4", put( _char_len_( 4 ), 5. )) ;
call symput( "CHARLEN5", put( _char_len_( 5 ), 5. )) ;
call symput( "CHARLEN6", put( _char_len_( 6 ), 5. )) ;
call symput( "NUMLEN1", put( _num_len_( 1 ), 1. )) ;
call symput( "NUMLEN2", put( _num_len_( 2 ), 1. )) ;
call symput( "NUMLEN3", put( _num_len_( 3 ), 1. )) ;
call symput( "NUMLEN4", put( _num_len_( 4 ), 1. )) ;
call symput( "NUMLEN5", put( _num_len_( 5 ), 1. )) ;
call symput( "NUMLEN6", put( _num_len_( 6 ), 1. )) ;
call symput( "NUMLEN7", put( _num_len_( 7 ), 1. )) ;
call symput( "NUMLEN8", put( _num_len_( 8 ), 1. )) ;
call symput( "NUMLEN9", put( _num_len_( 9 ), 1. )) ;
call symput( "NUMLEN10", put( _num_len_( 10 ), 1. )) ;
call symput( "NUMLEN11", put( _num_len_( 11 ), 1. )) ;
call symput( "NUMLEN12", put( _num_len_( 12 ), 1. )) ;
call symput( "NUMLEN13", put( _num_len_( 13 ), 1. )) ;
call symput( "NUMLEN14", put( _num_len_( 14 ), 1. )) ;
call symput( "NUMLEN15", put( _num_len_( 15 ), 1. )) ;
end ;
run ;
proc datasets nolist ;
delete _cntnts_ ;
run ;
data _null_ ;
length retain $32767 ;
retain retain 'retain ' ;
dsid = open( "data.contrib_201209", 'I' ) ;
do _i_ = 1 to attrn( dsid, 'nvars' ) ;
retain = trim( retain ) || ' ' || varname( dsid, _i_ ) ;
end ;
call symput( 'RETAIN', retain ) ;
run ;
data data.contrib_201209_new ;
retain HHID STATE ZIP BRANCH CBR MARKET DDA_CON MMS_CON SAV_CON TDA_CON IRA_CON SEC_CON TRS_CON mtg_con heq_con card_con ILN_CON SLN_CON band band_yr IND_con ;
LENGTH BRANCH $5 HHID $9 STATE $2 ZIP $5 band $1 band_yr $1 ;
LENGTH CBR 3 DDA_CON 8 ILN_CON 8 IND_con 8 IRA_CON 8 MARKET 3 MMS_CON 8 SAV_CON 8 SEC_CON 8 SLN_CON 8 TDA_CON 8 TRS_CON 8 card_con 8 heq_con 8 mtg_con 8 ;
FORMAT BRANCH $5. HHID $9. STATE $2. ZIP $5. band $1. band_yr $1. ;
set data.contrib_201209 ;
run ;
options compress=yes;
proc datasets library=data;
delete contrib_201209;
change contrib_201209_new=contrib_201209;
run;
